import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime
import json
from pathlib import Path
import os

# Importar m√≥dulo de sustenta√ß√£o
try:
    from sustentacao import main_sustentacao
except ImportError:
    st.error("M√≥dulo de sustenta√ß√£o n√£o encontrado. Certifique-se de que o arquivo sustentacao.py est√° no mesmo diret√≥rio.")
    main_sustentacao = None

# Importar integra√ß√£o com Google Sheets
try:
    from google_sheets_integration import load_google_sheets_data_automatically
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False
    st.sidebar.warning("‚ö†Ô∏è Integra√ß√£o com Google Sheets n√£o dispon√≠vel. Instale as depend√™ncias: pip install gspread google-auth")

st.set_page_config(
    page_title="Dashboard DelTech - QA & Sustenta√ß√£o",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

def carregar_dados():
    # Tentar carregar automaticamente do Google Sheets
    if GOOGLE_SHEETS_AVAILABLE:
        with st.spinner("üîÑ Carregando dados do Google Sheets..."):
            df = load_google_sheets_data_automatically()
            if df is not None:
                st.success(f"‚úÖ Dados carregados automaticamente! {len(df)} registros encontrados.")
                return df
            else:
                st.warning("‚ö†Ô∏è N√£o foi poss√≠vel carregar os dados do Google Sheets. Verifique as credenciais.")
    
    # Fallback para upload manual
    st.info("üìÅ Fa√ßa upload do arquivo Excel como alternativa:")
    uploaded_file = st.file_uploader("Escolha o arquivo Excel", type=['xlsx', 'xls'])
    if uploaded_file is not None:
        try:
            df = pd.read_excel(uploaded_file)
            st.success(f"‚úÖ Arquivo carregado com sucesso! {len(df)} registros encontrados.")
            return df
        except Exception as e:
            st.error(f"Erro ao carregar arquivo: {e}")
            return None
    
    return None

def processar_dados(df):
    if 'Data' in df.columns:
        df['Data'] = pd.to_datetime(df['Data'], errors='coerce')
    
    # Considerar "PRONTO PARA PUBLICA√á√ÉO" como "APROVADA"
    if 'Status' in df.columns:
        df['Status'] = df['Status'].replace('PRONTO PARA PUBLICA√á√ÉO', 'APROVADA')
    
    colunas_esperadas = ['Data', 'Sprint', 'Time', 'Nome da Task', 'Link da Task', 
                        'Status', 'Respons√°vel', 'Motivo', 'Motivo2', 'Motivo3', 
                        'Responsavel pelo teste', 'ID', 'Erros']
    
    colunas_faltantes = [col for col in colunas_esperadas if col not in df.columns]
    if colunas_faltantes:
        st.warning(f"Colunas n√£o encontradas: {colunas_faltantes}")
    
    return df

def separar_dados_sem_teste(df):
    """Separa registros com motivo 'SEM TESTE' dos dados principais e filtra respons√°veis"""
    if 'Motivo' in df.columns:
        # Primeiro separar por motivo
        sem_teste_mask = df['Motivo'].str.upper().str.contains('SEM TESTE', na=False)
        sem_teste = df[sem_teste_mask]
        com_teste = df[~sem_teste_mask]
        
        # Filtrar Wesley dos testadores apenas nos dados COM teste (Eduardo e Wilson)
        if 'Responsavel pelo teste' in com_teste.columns:
            com_teste = com_teste[com_teste['Responsavel pelo teste'].isin(['Eduardo', 'Wilson'])]
        
        return com_teste, sem_teste
    return df, pd.DataFrame()

def contar_bugs_por_time(df_rejeitadas):
    """Conta todos os bugs por time considerando Motivo, Motivo2 e Motivo3"""
    if df_rejeitadas.empty:
        return pd.Series(dtype=int)
    
    bugs_por_time = {}
    motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
    
    for _, row in df_rejeitadas.iterrows():
        time = row.get('Time', 'Desconhecido')
        if time not in bugs_por_time:
            bugs_por_time[time] = 0
        
        # Conta cada motivo n√£o nulo como um bug separado, excluindo n√£o-bugs
        for col in motivos_cols:
            if col in row and pd.notna(row[col]) and str(row[col]).strip() != '':
                motivo = str(row[col]).strip().lower()
                if motivo not in ['aprovada', 'sem recusa']:
                    bugs_por_time[time] += 1
    
    return pd.Series(bugs_por_time).sort_values(ascending=False)

def contar_total_bugs(df_rejeitadas):
    """Conta o total de bugs considerando Motivo, Motivo2 e Motivo3"""
    if df_rejeitadas.empty:
        return 0
    
    total_bugs = 0
    motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
    
    for _, row in df_rejeitadas.iterrows():
        # Conta cada motivo n√£o nulo como um bug separado, excluindo n√£o-bugs
        for col in motivos_cols:
            if col in row and pd.notna(row[col]) and str(row[col]).strip() != '':
                motivo = str(row[col]).strip().lower()
                if motivo not in ['aprovada', 'sem recusa']:
                    total_bugs += 1
    
    return total_bugs

def contar_erros_por_time(df_filtrado):
    """Conta erros por time considerando tanto a coluna 'Erros' quanto os motivos de rejei√ß√£o"""
    if df_filtrado.empty or 'Time' not in df_filtrado.columns:
        return pd.Series(dtype=int)
    
    erros_por_time = {}
    
    # 1. Contar erros da coluna 'Erros' (dados mais recentes)
    if 'Erros' in df_filtrado.columns:
        df_temp = df_filtrado.copy()
        df_temp['Erros'] = pd.to_numeric(df_temp['Erros'], errors='coerce').fillna(0)
        df_com_erros = df_temp[df_temp['Erros'] > 0]
        
        for _, row in df_com_erros.iterrows():
            time = row.get('Time', 'Desconhecido')
            if time not in erros_por_time:
                erros_por_time[time] = 0
            erros_por_time[time] += row['Erros']
    
    # 2. Para registros sem dados na coluna 'Erros', usar an√°lise de motivos (dados hist√≥ricos)
    df_sem_erros_coluna = df_filtrado[
        (~df_filtrado['Erros'].notna()) | 
        (pd.to_numeric(df_filtrado['Erros'], errors='coerce').fillna(0) == 0)
    ] if 'Erros' in df_filtrado.columns else df_filtrado
    
    # Filtrar apenas rejeitadas para an√°lise de motivos
    df_rejeitadas_historicas = df_sem_erros_coluna[df_sem_erros_coluna['Status'] == 'REJEITADA']
    
    # Contar motivos como erros hist√≥ricos por time
    motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
    for _, row in df_rejeitadas_historicas.iterrows():
        time = row.get('Time', 'Desconhecido')
        if time not in erros_por_time:
            erros_por_time[time] = 0
        
        for col in motivos_cols:
            if col in row and pd.notna(row[col]) and str(row[col]).strip() != '':
                motivo = str(row[col]).strip().lower()
                if motivo not in ['aprovada', 'sem recusa']:
                    erros_por_time[time] += 1
    
    return pd.Series(erros_por_time).sort_values(ascending=False) if erros_por_time else pd.Series(dtype=int)

def contar_total_erros(df_filtrado):
    """Conta o total de erros considerando tanto a coluna 'Erros' quanto os motivos de rejei√ß√£o"""
    if df_filtrado.empty:
        return 0
    
    total_erros = 0
    
    # 1. Contar erros da coluna 'Erros' (dados mais recentes)
    if 'Erros' in df_filtrado.columns:
        erros_numericos = pd.to_numeric(df_filtrado['Erros'], errors='coerce').fillna(0)
        total_erros += erros_numericos.sum()
    
    # 2. Para registros sem dados na coluna 'Erros', usar an√°lise de motivos (dados hist√≥ricos)
    df_sem_erros_coluna = df_filtrado[
        (~df_filtrado['Erros'].notna()) | 
        (pd.to_numeric(df_filtrado['Erros'], errors='coerce').fillna(0) == 0)
    ] if 'Erros' in df_filtrado.columns else df_filtrado
    
    # Filtrar apenas rejeitadas para an√°lise de motivos
    df_rejeitadas_historicas = df_sem_erros_coluna[df_sem_erros_coluna['Status'] == 'REJEITADA']
    
    # Contar motivos como erros hist√≥ricos
    motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
    for _, row in df_rejeitadas_historicas.iterrows():
        for col in motivos_cols:
            if col in row and pd.notna(row[col]) and str(row[col]).strip() != '':
                motivo = str(row[col]).strip().lower()
                if motivo not in ['aprovada', 'sem recusa']:
                    total_erros += 1
    
    if pd.isna(total_erros) or total_erros == float('inf') or total_erros == float('-inf'):
        return 0
    
    try:
        return int(total_erros)
    except (ValueError, OverflowError):
        return 0

def calcular_media_erros_por_teste(df_filtrado):
    """Calcula a m√©dia de erros por teste"""
    if df_filtrado.empty or 'Erros' not in df_filtrado.columns:
        return 0
    
    total_testes = len(df_filtrado)
    total_erros = contar_total_erros(df_filtrado)
    
    if total_testes == 0:
        return 0
    
    return round(total_erros / total_testes, 2)

def contar_erros_por_testador(df_filtrado):
    """Conta erros por testador considerando tanto a coluna 'Erros' quanto os motivos de rejei√ß√£o"""
    if df_filtrado.empty or 'Responsavel pelo teste' not in df_filtrado.columns:
        return pd.Series(dtype=int)
    
    erros_por_testador = {}
    
    # 1. Contar erros da coluna 'Erros' (dados mais recentes)
    if 'Erros' in df_filtrado.columns:
        df_temp = df_filtrado.copy()
        df_temp['Erros'] = pd.to_numeric(df_temp['Erros'], errors='coerce').fillna(0)
        df_com_erros = df_temp[df_temp['Erros'] > 0]
        
        for _, row in df_com_erros.iterrows():
            testador = row.get('Responsavel pelo teste', 'Desconhecido')
            if testador not in erros_por_testador:
                erros_por_testador[testador] = 0
            erros_por_testador[testador] += row['Erros']
    
    # 2. Para registros sem dados na coluna 'Erros', usar an√°lise de motivos (dados hist√≥ricos)
    df_sem_erros_coluna = df_filtrado[
        (~df_filtrado['Erros'].notna()) | 
        (pd.to_numeric(df_filtrado['Erros'], errors='coerce').fillna(0) == 0)
    ] if 'Erros' in df_filtrado.columns else df_filtrado
    
    # Filtrar apenas rejeitadas para an√°lise de motivos
    df_rejeitadas_historicas = df_sem_erros_coluna[df_sem_erros_coluna['Status'] == 'REJEITADA']
    
    # Contar motivos como erros hist√≥ricos por testador
    motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
    for _, row in df_rejeitadas_historicas.iterrows():
        testador = row.get('Responsavel pelo teste', 'Desconhecido')
        if testador not in erros_por_testador:
            erros_por_testador[testador] = 0
        
        for col in motivos_cols:
            if col in row and pd.notna(row[col]) and str(row[col]).strip() != '':
                motivo = str(row[col]).strip().lower()
                if motivo not in ['aprovada', 'sem recusa']:
                    erros_por_testador[testador] += 1
    
    return pd.Series(erros_por_testador).sort_values(ascending=False) if erros_por_testador else pd.Series(dtype=int)

def analisar_distribuicao_erros(df_filtrado):
    """Analisa a distribui√ß√£o de erros considerando tanto a coluna 'Erros' quanto os motivos hist√≥ricos"""
    if df_filtrado.empty:
        return {}
    
    total_testes_real = len(df_filtrado)
    
    # Contar erros usando l√≥gica h√≠brida (coluna 'Erros' + motivos hist√≥ricos)
    total_erros_hibrido = 0
    testes_com_erro_hibrido = 0
    
    # 1. Contar erros da coluna 'Erros' (dados mais recentes)
    if 'Erros' in df_filtrado.columns:
        df_temp = df_filtrado.copy()
        df_temp['Erros'] = pd.to_numeric(df_temp['Erros'], errors='coerce').fillna(0)
        df_com_erros = df_temp[df_temp['Erros'] > 0]
        
        total_erros_hibrido += df_com_erros['Erros'].sum()
        testes_com_erro_hibrido += len(df_com_erros)
    
    # 2. Para registros sem dados na coluna 'Erros', usar an√°lise de motivos (dados hist√≥ricos)
    df_sem_erros_coluna = df_filtrado[
        (~df_filtrado['Erros'].notna()) | 
        (pd.to_numeric(df_filtrado['Erros'], errors='coerce').fillna(0) == 0)
    ] if 'Erros' in df_filtrado.columns else df_filtrado
    
    # Filtrar apenas rejeitadas para an√°lise de motivos
    df_rejeitadas_historicas = df_sem_erros_coluna[df_sem_erros_coluna['Status'] == 'REJEITADA']
    
    # Contar motivos como erros hist√≥ricos
    motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
    testes_historicos_com_erro = set()
    
    for idx, row in df_rejeitadas_historicas.iterrows():
        erros_neste_teste = 0
        for col in motivos_cols:
            if col in row and pd.notna(row[col]) and str(row[col]).strip() != '':
                motivo = str(row[col]).strip().lower()
                if motivo not in ['aprovada', 'sem recusa']:
                    erros_neste_teste += 1
        
        if erros_neste_teste > 0:
            total_erros_hibrido += erros_neste_teste
            testes_historicos_com_erro.add(idx)
    
    testes_com_erro_hibrido += len(testes_historicos_com_erro)
    testes_sem_erro_hibrido = total_testes_real - testes_com_erro_hibrido
    
    # Calcular m√©tricas de distribui√ß√£o
    max_erros = 0
    min_erros = 0
    mediana_erros = 0
    
    if 'Erros' in df_filtrado.columns:
        df_temp = df_filtrado.copy()
        df_temp['Erros'] = pd.to_numeric(df_temp['Erros'], errors='coerce').fillna(0)
        df_com_dados = df_temp[df_temp['Erros'].notna()]
        if not df_com_dados.empty:
            max_erros = df_com_dados['Erros'].max()
            min_erros = df_com_dados['Erros'].min()
            mediana_erros = df_com_dados['Erros'].median()
    
    analise = {
        'testes_sem_erro': testes_sem_erro_hibrido,
        'testes_com_erro': testes_com_erro_hibrido,
        'testes_sem_dados': 0,  # Agora consideramos dados hist√≥ricos
        'total_testes': total_testes_real,
        'total_com_dados': total_testes_real,  # Todos t√™m dados (coluna Erros ou motivos)
        'total_erros': total_erros_hibrido,
        'max_erros_teste': max_erros,
        'min_erros_teste': min_erros,
        'mediana_erros': mediana_erros
    }
    
    return analise

def analisar_qualidade_unificada(df_filtrado):
    """An√°lise unificada combinando motivos qualitativos e erros quantitativos"""
    if df_filtrado.empty:
        return {}
    
    # An√°lise quantitativa (coluna Erros)
    analise_erros = analisar_distribuicao_erros(df_filtrado)
    
    # An√°lise qualitativa (Motivos de rejei√ß√£o)
    df_rejeitadas = df_filtrado[df_filtrado['Status'] == 'REJEITADA'] if 'Status' in df_filtrado.columns else pd.DataFrame()
    
    # Contar bugs por motivos
    total_bugs_motivos = contar_total_bugs(df_rejeitadas)
    bugs_por_time_motivos = contar_bugs_por_time(df_rejeitadas) if not df_rejeitadas.empty else pd.Series(dtype=int)
    
    # An√°lise de motivos
    motivos_analysis = {}
    if not df_rejeitadas.empty:
        motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
        motivos_existentes = [col for col in motivos_cols if col in df_rejeitadas.columns]
        
        if motivos_existentes:
            todos_motivos = []
            for col in motivos_existentes:
                motivos = df_rejeitadas[col].dropna().tolist()
                todos_motivos.extend(motivos)
            
            if todos_motivos:
                motivos_filtrados = [motivo for motivo in todos_motivos 
                                   if motivo.lower() not in ['aprovada', 'sem recusa']]
                
                if motivos_filtrados:
                    motivos_counts = pd.Series(motivos_filtrados).value_counts()
                    motivos_analysis = {
                        'motivos_counts': motivos_counts.to_dict(),
                        'motivo_mais_comum': motivos_counts.index[0] if len(motivos_counts) > 0 else None,
                        'total_motivos_registrados': len(motivos_filtrados)
                    }
    
    # Combinar an√°lises
    analise_unificada = {
        # Dados quantitativos (coluna Erros)
        'erros_quantitativos': analise_erros,
        'total_erros_numericos': contar_total_erros(df_filtrado),
        'media_erros_por_teste': calcular_media_erros_por_teste(df_filtrado),
        
        # Dados qualitativos (Motivos)
        'bugs_qualitativos': {
            'total_bugs_motivos': total_bugs_motivos,
            'bugs_por_time': bugs_por_time_motivos.to_dict() if not bugs_por_time_motivos.empty else {},
            'total_rejeitadas': len(df_rejeitadas),
            'motivos_analysis': motivos_analysis
        },
        
        # M√©tricas comparativas
        'metricas_comparativas': {
            'total_testes': len(df_filtrado),
            'taxa_rejeicao': (len(df_rejeitadas) / len(df_filtrado) * 100) if len(df_filtrado) > 0 else 0,
            'taxa_erros_numericos': (analise_erros.get('testes_com_erro', 0) / len(df_filtrado) * 100) if len(df_filtrado) > 0 else 0,
            'cobertura_dados_erros': (analise_erros.get('total_com_dados', 0) / len(df_filtrado) * 100) if len(df_filtrado) > 0 else 0
        }
    }
    
    return analise_unificada

# ===== FUN√á√ïES PARA AN√ÅLISE DE BUGS =====

def carregar_dados_bugs():
    """Carrega dados de bugs via upload de arquivo"""
    uploaded_file_bugs = st.file_uploader(
        "Fa√ßa upload da planilha de bugs",
        type=['xlsx', 'xls'],
        key="bugs_uploader",
        help="Selecione a planilha contendo os dados de bugs para an√°lise"
    )
    
    if uploaded_file_bugs is not None:
        try:
            df_bugs = pd.read_excel(uploaded_file_bugs)
            # Processar dados de bugs
            if 'Data' in df_bugs.columns:
                df_bugs['Data'] = pd.to_datetime(df_bugs['Data'], errors='coerce')
            st.success(f"‚úÖ Planilha de bugs carregada: {uploaded_file_bugs.name}")
            return df_bugs
        except Exception as e:
            st.error(f"Erro ao carregar arquivo de bugs: {e}")
            return None
    return None

def processar_metricas_bugs(df_bugs):
    """Processa m√©tricas espec√≠ficas de bugs"""
    if df_bugs is None or df_bugs.empty:
        return {}
    
    metricas = {
        'total_bugs': len(df_bugs),
        'bugs_por_status': {},
        'bugs_por_prioridade': {},
        'bugs_por_time': {},
        'bugs_por_fonte': {},
        'bugs_criticos': 0,
        'bugs_abertos': 0,
        'bugs_resolvidos': 0
    }
    
    # An√°lise por status
    if 'Status' in df_bugs.columns:
        metricas['bugs_por_status'] = df_bugs['Status'].value_counts().to_dict()
        metricas['bugs_abertos'] = sum([v for k, v in metricas['bugs_por_status'].items() 
                                       if any(palavra in k.lower() for palavra in ['pendente', 'aberto', 'em corre√ß√£o'])])
        metricas['bugs_resolvidos'] = sum([v for k, v in metricas['bugs_por_status'].items() 
                                         if 'corrigido' in k.lower()])
    
    # An√°lise por prioridade
    if 'Prioridade' in df_bugs.columns:
        metricas['bugs_por_prioridade'] = df_bugs['Prioridade'].value_counts().to_dict()
        metricas['bugs_criticos'] = sum([v for k, v in metricas['bugs_por_prioridade'].items() 
                                        if 'alta' in k.lower()])
    
    # An√°lise por time
    if 'Time' in df_bugs.columns:
        metricas['bugs_por_time'] = df_bugs['Time'].value_counts().to_dict()
    
    # An√°lise por fonte (quem encontrou)
    if 'Encontrado por:' in df_bugs.columns:
        metricas['bugs_por_fonte'] = df_bugs['Encontrado por:'].value_counts().to_dict()
    
    return metricas

def grafico_bugs_por_status(df_bugs):
    """Gr√°fico de distribui√ß√£o de bugs por status"""
    if df_bugs is None or df_bugs.empty or 'Status' not in df_bugs.columns:
        return None
    
    status_counts = df_bugs['Status'].value_counts()
    
    # Mapeamento de cores espec√≠fico para cada status
    cores_status = {
        'Concluido': '#4CAF50',  # Verde para conclu√≠do
        'Conclu√≠do': '#4CAF50',  # Verde para conclu√≠do
        'Corrigido': '#4CAF50',  # Verde para corrigido
        'Pendente': '#FFA726',   # Laranja para pendente
        'Em corre√ß√£o': '#2196F3', # Azul para em corre√ß√£o
        'Em correcao': '#2196F3', # Azul para em corre√ß√£o
        'Aberto': '#FF5722'      # Vermelho para aberto
    }
    
    # Criar lista de cores baseada nos status presentes
    cores_ordenadas = [cores_status.get(status, '#9E9E9E') for status in status_counts.index]
    
    fig = px.pie(
        values=status_counts.values,
        names=status_counts.index,
        title="üêõ Status dos Bugs Identificados",
        color_discrete_sequence=cores_ordenadas
    )
    fig.update_traces(
        textinfo='label+percent+value',
        hovertemplate='Status: %{label}<br>Quantidade: %{value}<br>Percentual: %{percent}<extra></extra>'
    )
    return fig

def grafico_bugs_por_prioridade(df_bugs):
    """Gr√°fico de bugs por prioridade"""
    if df_bugs is None or df_bugs.empty or 'Prioridade' not in df_bugs.columns:
        return None
    
    prioridade_counts = df_bugs['Prioridade'].value_counts()
    cores = {'Alta': '#FF6B6B', 'Media': '#FFA726', 'Baixa': '#4CAF50'}
    
    fig = px.bar(
        x=prioridade_counts.index,
        y=prioridade_counts.values,
        title="‚ö†Ô∏è Distribui√ß√£o de Bugs por Prioridade",
        color=prioridade_counts.index,
        color_discrete_map=cores,
        text=prioridade_counts.values
    )
    fig.update_traces(
        textposition='outside',
        hovertemplate='Prioridade: %{x}<br>Quantidade: %{y}<extra></extra>'
    )
    fig.update_layout(showlegend=False)
    return fig

def grafico_bugs_por_time(df_bugs):
    """Gr√°fico de bugs por time"""
    if df_bugs is None or df_bugs.empty or 'Time' not in df_bugs.columns:
        return None
    
    time_counts = df_bugs['Time'].value_counts()
    fig = px.bar(
        y=time_counts.index,
        x=time_counts.values,
        orientation='h',
        title="üè¢ Bugs Identificados por Time",
        color=time_counts.values,
        color_continuous_scale='Reds',
        text=time_counts.values
    )
    fig.update_traces(
        textposition='outside',
        hovertemplate='Time: %{y}<br>Bugs: %{x}<extra></extra>'
    )
    fig.update_layout(
        height=max(400, len(time_counts) * 50),
        margin=dict(l=100)
    )
    return fig

def grafico_bugs_fonte_deteccao(df_bugs):
    """Gr√°fico de fonte de detec√ß√£o de bugs"""
    if df_bugs is None or df_bugs.empty or 'Encontrado por:' not in df_bugs.columns:
        return None
    
    fonte_counts = df_bugs['Encontrado por:'].value_counts()
    fig = px.pie(
        values=fonte_counts.values,
        names=fonte_counts.index,
        title="üîç Fonte de Detec√ß√£o dos Bugs",
        color_discrete_sequence=['#4ECDC4', '#FF6B6B', '#45B7D1']
    )
    fig.update_traces(
        textinfo='label+percent+value',
        hovertemplate='Fonte: %{label}<br>Quantidade: %{value}<br>Percentual: %{percent}<extra></extra>'
    )
    return fig

def grafico_evolucao_bugs(df_bugs):
    """Gr√°fico de evolu√ß√£o temporal dos bugs"""
    if df_bugs is None or df_bugs.empty or 'Data' not in df_bugs.columns:
        return None
    
    df_bugs_com_data = df_bugs.dropna(subset=['Data'])
    if df_bugs_com_data.empty:
        return None
    
    df_bugs_com_data['Mes'] = df_bugs_com_data['Data'].dt.to_period('M')
    bugs_por_mes = df_bugs_com_data['Mes'].value_counts().sort_index()
    
    fig = px.line(
        x=[str(m) for m in bugs_por_mes.index],
        y=bugs_por_mes.values,
        title="üìà Evolu√ß√£o dos Bugs ao Longo do Tempo",
        markers=True
    )
    fig.update_traces(
        line_color='#FF6B6B',
        marker_size=8,
        hovertemplate='M√™s: %{x}<br>Bugs: %{y}<extra></extra>'
    )
    fig.update_layout(
        xaxis_title="M√™s",
        yaxis_title="Quantidade de Bugs"
    )
    return fig


def grafico_status_distribuicao(df_filtrado):
    if 'Status' in df_filtrado.columns:
        status_counts = df_filtrado['Status'].value_counts()
        fig = px.pie(
            values=status_counts.values, 
            names=status_counts.index,
            title="üéØ Resultado dos Testes de Qualidade",
            color_discrete_sequence=['#4ECDC4', '#45B7D1', '#6C5CE7', '#96CEB4', '#FECA57']
        )
        fig.update_traces(
            textinfo='label+percent+value',
            hovertemplate='Status: %{label}<br>Quantidade: %{value}<br>Percentual: %{percent}<extra></extra>'
        )
        return fig
    return None

def grafico_tasks_por_time(df_filtrado):
    if 'Time' in df_filtrado.columns:
        time_counts = df_filtrado['Time'].value_counts()
        fig = px.bar(
            x=time_counts.values, 
            y=time_counts.index,
            title="üè¢ Cobertura de Q.A por Time de Desenvolvimento",
            labels={'x': 'Tasks Testadas', 'y': 'Time de Desenvolvimento'},
            orientation='h',
            color=time_counts.values,
            color_continuous_scale='plasma',
            text=time_counts.values
        )
        fig.update_coloraxes(colorbar_title="Quantidade de Tasks")
        fig.update_layout(
            showlegend=False, 
            height=max(450, len(time_counts) * 45),
            margin=dict(t=50, b=80, l=200, r=150)
        )
        fig.update_traces(textposition='outside', hovertemplate='Time: %{y}<br>Tasks Testadas: %{x}<extra></extra>')
        return fig
    return None

def grafico_responsavel_performance(df_filtrado):
    if 'Responsavel pelo teste' in df_filtrado.columns and 'Status' in df_filtrado.columns:
        perf_data = df_filtrado.groupby('Responsavel pelo teste')['Status'].value_counts().unstack(fill_value=0)
        if not perf_data.empty:
            perf_data['Total'] = perf_data.sum(axis=1)
            perf_data = perf_data.sort_values('Total', ascending=True)
            
            fig = go.Figure()
            
            for status in perf_data.columns[:-1]:
                fig.add_trace(go.Bar(
                    name=status,
                    y=perf_data.index,
                    x=perf_data[status],
                    orientation='h',
                    text=perf_data[status],
                    textposition='inside'
                ))
            
            fig.update_layout(
                title="üë• Performance dos Testadores Q.A",
                xaxis_title="Tasks Testadas",
                yaxis_title="Testador Q.A",
                barmode='stack',
                height=max(450, len(perf_data) * 35),
                margin=dict(t=50, b=80, l=200, r=150)
            )
            return fig
    return None

def grafico_timeline_tasks(df_filtrado):
    if 'Data' in df_filtrado.columns and 'Status' in df_filtrado.columns:
        df_timeline = df_filtrado.dropna(subset=['Data'])
        if not df_timeline.empty:
            df_timeline['Mes'] = df_timeline['Data'].dt.to_period('M')
            timeline_data = df_timeline.groupby(['Mes', 'Status']).size().reset_index(name='Count')
            timeline_data['Mes'] = timeline_data['Mes'].astype(str)
            
            fig = px.bar(
                timeline_data,
                x='Mes',
                y='Count',
                color='Status',
                title="üìà Evolu√ß√£o dos Testes de Qualidade",
                labels={'Count': 'Tasks Testadas por Dia', 'Mes': 'M√™s'},
                text='Count'
            )
            fig.update_layout(
                margin=dict(t=50, b=80, l=80, r=80),
                height=450
            )
            fig.update_xaxes(tickangle=45)
            fig.update_traces(textposition='outside', hovertemplate='M√™s: %{x}<br>Status: %{legendgroup}<br>Tasks Testadas: %{y}<extra></extra>')
            return fig
    return None

def grafico_motivos_rejeicao(df_filtrado):
    if 'Status' in df_filtrado.columns:
        df_rejeitadas = df_filtrado[df_filtrado['Status'] == 'REJEITADA']
        motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
        motivos_existentes = [col for col in motivos_cols if col in df_rejeitadas.columns]
        
        if motivos_existentes and not df_rejeitadas.empty:
            todos_motivos = []
            for col in motivos_existentes:
                motivos = df_rejeitadas[col].dropna().tolist()
                todos_motivos.extend(motivos)
            
            if todos_motivos:
                # Filtrar motivos que n√£o s√£o bugs reais
                motivos_filtrados = [motivo for motivo in todos_motivos 
                                   if motivo.lower() not in ['aprovada', 'sem recusa']]
                
                if motivos_filtrados:
                    motivos_counts = pd.Series(motivos_filtrados).value_counts().head(10)
                else:
                    return None
                fig = px.bar(
                    y=motivos_counts.index,
                    x=motivos_counts.values,
                    orientation='h',
                    title="üîç Principais Problemas Detectados pelo Q.A",
                    labels={'x': 'Bugs Identificados', 'y': 'Tipo de Problema'},
                    text=motivos_counts.values
                )
                fig.update_traces(
                    marker_color='#4ECDC4',
                    textposition='outside',
                    texttemplate='%{x}',
                    textfont_size=12,
                    hovertemplate='Problema: %{y}<br>Ocorr√™ncias: %{x}<extra></extra>'
                )
                fig.update_layout(
                    margin=dict(t=50, b=80, l=250, r=150),
                    height=max(450, len(motivos_counts) * 40)
                )
                return fig
    return None



def grafico_rejeicoes_por_dev(df_filtrado):
    if 'Status' in df_filtrado.columns and 'Respons√°vel' in df_filtrado.columns:
        dev_stats = df_filtrado.groupby('Respons√°vel')['Status'].value_counts().unstack(fill_value=0)
        if 'REJEITADA' in dev_stats.columns:
            dev_stats['Total_Tasks'] = dev_stats.sum(axis=1)
            dev_stats['Total_Rejeicoes'] = dev_stats.get('REJEITADA', 0)
            dev_stats['Percentual_Rejeicao'] = (dev_stats['Total_Rejeicoes'] / dev_stats['Total_Tasks'] * 100).round(1)
            dev_stats_filtered = dev_stats[dev_stats['Total_Tasks'] >= 3].sort_values('Total_Rejeicoes', ascending=False).head(10)
            
            if not dev_stats_filtered.empty:
                chart_data = dev_stats_filtered.reset_index()
                
                fig = px.bar(
                    chart_data,
                    x='Respons√°vel',
                    y='Total_Rejeicoes',
                    title="üë®‚Äçüíª Desenvolvedores com Mais Rejei√ß√µes (min. 3 tasks)",
                    labels={'Respons√°vel': 'Desenvolvedor', 'Total_Rejeicoes': 'Total de Rejei√ß√µes'},
                    color='Percentual_Rejeicao',
                    color_continuous_scale=['#4ECDC4', '#45B7D1', '#6C5CE7'],
                    text='Total_Rejeicoes',
                    hover_data={'Percentual_Rejeicao': ':.1f'}
                )
                fig.update_coloraxes(colorbar_title="Taxa de Rejei√ß√£o (%)")
                fig.update_layout(
                    margin=dict(t=50, b=150, l=150, r=80),
                    height=550
                )
                fig.update_xaxes(tickangle=45)
                fig.update_traces(textposition='outside')
                return fig
    return None

def grafico_evolucao_qualidade(df_filtrado):
    if 'Data' in df_filtrado.columns and 'Status' in df_filtrado.columns:
        df_timeline = df_filtrado.dropna(subset=['Data'])
        if not df_timeline.empty:
            df_timeline['Mes'] = df_timeline['Data'].dt.to_period('M')
            monthly_stats = df_timeline.groupby(['Mes', 'Status']).size().unstack(fill_value=0)
            
            if 'APROVADA' in monthly_stats.columns and 'REJEITADA' in monthly_stats.columns:
                monthly_stats['Total'] = monthly_stats.sum(axis=1)
                monthly_stats['Taxa_Aprovacao'] = (monthly_stats['APROVADA'] / monthly_stats['Total'] * 100).round(1)
                monthly_stats = monthly_stats.reset_index()
                monthly_stats['Mes'] = monthly_stats['Mes'].astype(str)
                
                fig = px.line(
                    monthly_stats,
                    x='Mes',
                    y='Taxa_Aprovacao',
                    title="üìà Evolu√ß√£o da Taxa de Aprova√ß√£o ao Longo do Tempo",
                    labels={'Taxa_Aprovacao': 'Taxa de Aprova√ß√£o (%)', 'Mes': 'M√™s'},
                    markers=True
                )
                fig.update_traces(hovertemplate='M√™s: %{x}<br>Taxa: %{y}%<extra></extra>')
                return fig
    return None

def grafico_erros_por_time(df_filtrado):
    """Gr√°fico mostrando quantidade de erros/bugs identificados por time"""
    if 'Time' in df_filtrado.columns and 'Status' in df_filtrado.columns:
        df_rejeitadas = df_filtrado[df_filtrado['Status'] == 'REJEITADA']
        if not df_rejeitadas.empty:
            erros_por_time = contar_bugs_por_time(df_rejeitadas)
            
            fig = px.bar(
                x=erros_por_time.index,
                y=erros_por_time.values,
                title="üö® Quantidade de Bugs Identificados por Time",
                labels={'x': 'Time de Desenvolvimento', 'y': 'Bugs Identificados'},
                color=erros_por_time.values,
                color_continuous_scale=['#4ECDC4', '#45B7D1', '#6C5CE7'],
                text=erros_por_time.values
            )
            fig.update_coloraxes(colorbar_title="Quantidade de Bugs")
            fig.update_layout(
                showlegend=False,
                margin=dict(t=50, b=120, l=120, r=80),
                height=450
            )
            fig.update_traces(
                textposition='outside',
                hovertemplate='Time: %{x}<br>Bugs: %{y}<extra></extra>'
            )
            fig.update_xaxes(tickangle=45)
            return fig
    return None

def grafico_erros_coluna_por_time(df_filtrado):
    """Gr√°fico mostrando quantidade de erros por time usando a coluna 'Erros'"""
    if 'Erros' not in df_filtrado.columns or 'Time' not in df_filtrado.columns:
        return None
    
    erros_por_time = contar_erros_por_time(df_filtrado)
    if erros_por_time.empty:
        return None
    
    fig = px.bar(
        x=erros_por_time.index,
        y=erros_por_time.values,
        title="üìä Total de Erros por Time",
        labels={'x': 'Time', 'y': 'Total de Erros'},
        color=erros_por_time.values,
        color_continuous_scale=['#4ECDC4', '#45B7D1', '#FF6B6B'],
        text=erros_por_time.values
    )
    
    fig.update_layout(
        margin=dict(t=50, b=150, l=80, r=80),
        height=450,
        xaxis_tickangle=45,
        showlegend=False
    )
    fig.update_traces(
        textposition='outside', 
        textfont_size=12,
        hovertemplate='Time: %{x}<br>Erros: %{y}<extra></extra>'
    )
    return fig

def grafico_erros_por_testador(df_filtrado):
    """Gr√°fico mostrando quantidade de erros por testador"""
    if ('Erros' not in df_filtrado.columns or 
        'Responsavel pelo teste' not in df_filtrado.columns):
        return None
    
    erros_por_testador = contar_erros_por_testador(df_filtrado)
    if erros_por_testador.empty:
        return None
    
    fig = px.bar(
        x=erros_por_testador.values,
        y=erros_por_testador.index,
        orientation='h',
        title="üë• Total de Erros Encontrados por Testador",
        labels={'x': 'Total de Erros', 'y': 'Testador'},
        color=erros_por_testador.values,
        color_continuous_scale='Reds',
        text=erros_por_testador.values
    )
    
    fig.update_layout(
        height=max(400, len(erros_por_testador) * 60),
        margin=dict(l=150, r=50, t=50, b=50),
        showlegend=False
    )
    fig.update_traces(
        textposition='outside',
        hovertemplate='Testador: %{y}<br>Erros: %{x}<extra></extra>'
    )
    return fig

def grafico_distribuicao_erros(df_filtrado):
    """Gr√°fico de distribui√ß√£o de erros (testes com/sem erro e sem dados)"""
    if 'Erros' not in df_filtrado.columns:
        return None
    
    analise = analisar_distribuicao_erros(df_filtrado)
    if not analise:
        return None
    
    labels = ['Testes sem Erro', 'Testes com Erro', 'Testes sem Dados']
    values = [analise['testes_sem_erro'], analise['testes_com_erro'], analise['testes_sem_dados']]
    
    if sum(values) == 0:
        return None
    
    fig = px.pie(
        values=values,
        names=labels,
        title="üéØ Distribui√ß√£o Completa de Testes",
        color_discrete_sequence=['#4CAF50', '#FF6B6B', '#FFA726']
    )
    
    fig.update_traces(
        textinfo='label+percent+value',
        hovertemplate='%{label}<br>Quantidade: %{value}<br>Percentual: %{percent}<extra></extra>'
    )
    return fig

def grafico_media_erros_por_time(df_filtrado):
    """Gr√°fico da m√©dia de erros por time usando l√≥gica h√≠brida"""
    if 'Time' not in df_filtrado.columns:
        return None
    
    # Usar a fun√ß√£o contar_erros_por_time que j√° implementa a l√≥gica h√≠brida
    erros_por_time = contar_erros_por_time(df_filtrado)
    if erros_por_time.empty:
        return None
    
    # Contar total de testes por time para calcular a m√©dia
    testes_por_time = df_filtrado.groupby('Time').size()
    
    # Calcular m√©dia de erros por teste por time
    media_erros_time = {}
    for time in erros_por_time.index:
        if time in testes_por_time.index and testes_por_time[time] > 0:
            media_erros_time[time] = erros_por_time[time] / testes_por_time[time]
    
    if not media_erros_time:
        return None
    
    # Converter para Series e ordenar
    media_erros_series = pd.Series(media_erros_time).sort_values(ascending=False)
    
    fig = px.bar(
        x=media_erros_series.index,
        y=media_erros_series.values,
        title="üìà M√©dia de Erros por Teste por Time (Dados H√≠bridos)",
        labels={'x': 'Time', 'y': 'M√©dia de Erros por Teste'},
        color=media_erros_series.values,
        color_continuous_scale='Oranges',
        text=[f"{val:.1f}" for val in media_erros_series.values]
    )
    
    fig.update_layout(
        margin=dict(t=50, b=150, l=80, r=80),
        height=450,
        xaxis_tickangle=45,
        showlegend=False
    )
    fig.update_traces(
        textposition='outside',
        hovertemplate='Time: %{x}<br>M√©dia: %{y:.2f}<extra></extra>'
    )
    return fig

def grafico_distribuicao_bugs_tipo(df_filtrado):
    """Gr√°fico de distribui√ß√£o dos tipos de bugs mais comuns"""
    if 'Status' in df_filtrado.columns:
        df_rejeitadas = df_filtrado[df_filtrado['Status'] == 'REJEITADA']
        motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
        motivos_existentes = [col for col in motivos_cols if col in df_rejeitadas.columns]
        
        if motivos_existentes and not df_rejeitadas.empty:
            todos_motivos = []
            for col in motivos_existentes:
                motivos = df_rejeitadas[col].dropna().tolist()
                todos_motivos.extend(motivos)
            
            if todos_motivos:
                # Filtrar motivos que n√£o s√£o bugs reais
                motivos_filtrados = [motivo for motivo in todos_motivos 
                                   if motivo.lower() not in ['aprovada', 'sem recusa']]
                
                if motivos_filtrados:
                    motivos_counts = pd.Series(motivos_filtrados).value_counts().head(8)
                else:
                    return None
                
                fig = px.pie(
                    values=motivos_counts.values,
                    names=motivos_counts.index,
                    title="üîç Distribui√ß√£o dos Tipos de Bugs Mais Comuns",
                    color_discrete_sequence=['#4ECDC4', '#45B7D1', '#6C5CE7', '#96CEB4', '#FECA57']
                )
                fig.update_layout(
                    margin=dict(t=50, b=50, l=100, r=50),
                    height=500
                )
                fig.update_traces(
                    textinfo='label+percent',
                    hovertemplate='Tipo: %{label}<br>Quantidade: %{value}<br>Percentual: %{percent}<extra></extra>'
                )
                return fig
    return None

def grafico_heatmap_atividade(df_filtrado):
    """Heatmap de atividade de testes por dia da semana e hora"""
    if 'Data' in df_filtrado.columns:
        df_com_data = df_filtrado.dropna(subset=['Data'])
        if not df_com_data.empty:
            df_com_data['Dia_Semana'] = df_com_data['Data'].dt.day_name()
            df_com_data['Semana'] = df_com_data['Data'].dt.isocalendar().week
            
            # Mapear dias da semana para portugu√™s
            dias_pt = {
                'Monday': 'Segunda', 'Tuesday': 'Ter√ßa', 'Wednesday': 'Quarta',
                'Thursday': 'Quinta', 'Friday': 'Sexta', 'Saturday': 'S√°bado', 'Sunday': 'Domingo'
            }
            df_com_data['Dia_Semana'] = df_com_data['Dia_Semana'].map(dias_pt)
            
            heatmap_data = df_com_data.groupby(['Semana', 'Dia_Semana']).size().reset_index(name='Testes')
            
            if not heatmap_data.empty:
                pivot_data = heatmap_data.pivot(index='Dia_Semana', columns='Semana', values='Testes').fillna(0)
                
                # Ordenar dias da semana
                ordem_dias = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo']
                pivot_data = pivot_data.reindex(ordem_dias)
                
                fig = px.imshow(
                    pivot_data,
                    title="üìÖ Heatmap de Atividade de Testes por Semana",
                    labels={'x': 'Semana do Ano', 'y': 'Dia da Semana', 'color': 'Quantidade de Testes'},
                    color_continuous_scale='Blues'
                )
                fig.update_coloraxes(colorbar_title="Quantidade de Testes")
                fig.update_layout(
                    margin=dict(t=50, b=50, l=100, r=50),
                    height=400
                )
                return fig
    return None

def grafico_motivos_por_time(df_filtrado):
    if df_filtrado.empty or 'Time' not in df_filtrado.columns:
        return None
    
    df_rejeitadas = df_filtrado[df_filtrado['Status'] == 'REJEITADA']
    if df_rejeitadas.empty:
        return None
    
    motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
    motivos_existentes = [col for col in motivos_cols if col in df_rejeitadas.columns]
    
    if not motivos_existentes:
        return None
    
    dados_motivos = []
    for _, row in df_rejeitadas.iterrows():
        time = row.get('Time', 'N/A')
        for col in motivos_existentes:
            motivo = row.get(col)
            if pd.notna(motivo) and motivo.lower() not in ['aprovada', 'sem recusa', ''] and str(motivo).strip() != '':
                dados_motivos.append({'Time': time})
    
    if not dados_motivos:
        return None
    
    df_motivos = pd.DataFrame(dados_motivos)
    total_por_time = df_motivos['Time'].value_counts().sort_values(ascending=False)
    
    if total_por_time.empty:
        return None
    
    fig = px.bar(
        x=total_por_time.index,
        y=total_por_time.values,
        title='üéØ Total de Motivos de Rejei√ß√£o por Time',
        labels={'x': 'Time', 'y': 'Total de Motivos'},
        text=total_por_time.values,
        color=total_por_time.values,
        color_continuous_scale=['#4ECDC4', '#45B7D1', '#FF6B6B']
    )
    
    fig.update_traces(textposition='outside', textfont_size=12)
    fig.update_layout(
        title_font_color='#FFFFFF',
        xaxis_title='Time de Desenvolvimento',
        yaxis_title='Total de Motivos de Rejei√ß√£o',
        margin=dict(t=60, b=120, l=80, r=80),
        height=500,
        showlegend=False,
        xaxis_tickangle=45
    )
    
    return fig

def grafico_motivos_por_desenvolvedor(df_filtrado):
    if df_filtrado.empty or 'Respons√°vel' not in df_filtrado.columns:
        return None
    
    df_rejeitadas = df_filtrado[df_filtrado['Status'] == 'REJEITADA']
    if df_rejeitadas.empty:
        return None
    
    motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
    motivos_existentes = [col for col in motivos_cols if col in df_rejeitadas.columns]
    
    if not motivos_existentes:
        return None
    
    dados_motivos = []
    for _, row in df_rejeitadas.iterrows():
        dev = row.get('Respons√°vel', 'N/A')
        for col in motivos_existentes:
            motivo = row.get(col)
            if pd.notna(motivo) and motivo.lower() not in ['aprovada', 'sem recusa', ''] and str(motivo).strip() != '':
                dados_motivos.append({'Desenvolvedor': dev})
    
    if not dados_motivos:
        return None
    
    df_motivos = pd.DataFrame(dados_motivos)
    total_por_dev = df_motivos['Desenvolvedor'].value_counts().sort_values(ascending=False).head(10)
    
    if total_por_dev.empty:
        return None
    
    fig = px.bar(
        x=total_por_dev.index,
        y=total_por_dev.values,
        title='üë®‚Äçüíª Total de Motivos de Rejei√ß√£o por Desenvolvedor (Top 10)',
        labels={'x': 'Desenvolvedor', 'y': 'Total de Motivos'},
        text=total_por_dev.values,
        color=total_por_dev.values,
        color_continuous_scale=['#4ECDC4', '#45B7D1', '#FF6B6B']
    )
    
    fig.update_traces(textposition='outside', textfont_size=12)
    fig.update_layout(
        title_font_color='#FFFFFF',
        xaxis_title='Desenvolvedor',
        yaxis_title='Total de Motivos de Rejei√ß√£o',
        margin=dict(t=60, b=150, l=80, r=80),
        height=500,
        showlegend=False,
        xaxis_tickangle=45
    )
    
    return fig

def grafico_ranking_problemas(df_filtrado):
    if df_filtrado.empty:
        return None
    
    df_rejeitadas = df_filtrado[df_filtrado['Status'] == 'REJEITADA']
    if df_rejeitadas.empty:
        return None
    
    motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
    motivos_existentes = [col for col in motivos_cols if col in df_rejeitadas.columns]
    
    if not motivos_existentes:
        return None
    
    todos_motivos = []
    for col in motivos_existentes:
        motivos = df_rejeitadas[col].dropna().tolist()
        todos_motivos.extend(motivos)
    
    motivos_filtrados = [motivo for motivo in todos_motivos 
                        if motivo.lower() not in ['aprovada', 'sem recusa', '']]
    
    if not motivos_filtrados:
        return None
    
    ranking_motivos = pd.Series(motivos_filtrados).value_counts().head(10)
    
    fig = px.bar(
        x=ranking_motivos.values,
        y=ranking_motivos.index,
        orientation='h',
        title='üèÜ Top 10 - Tipos de Problemas Mais Encontrados',
        text=ranking_motivos.values,
        color=ranking_motivos.values,
        color_continuous_scale='Reds'
    )
    
    fig.update_traces(textposition='outside')
    fig.update_layout(
        title_font_color='#FFFFFF',
        xaxis_title='Quantidade de Ocorr√™ncias',
        yaxis_title='Tipo de Problema',
        margin=dict(t=60, b=80, l=80, r=80),
        height=500,
        yaxis={'categoryorder': 'total ascending'}
    )
    
    return fig

def grafico_motivos_recusa_por_dev(df_filtrado):
    """Gr√°fico mostrando total de rejei√ß√µes por desenvolvedor"""
    if 'Status' in df_filtrado.columns and 'Respons√°vel' in df_filtrado.columns:
        df_rejeitadas = df_filtrado[df_filtrado['Status'] == 'REJEITADA']
        
        if not df_rejeitadas.empty:
            # Contar total de rejei√ß√µes por desenvolvedor
            rejeicoes_por_dev = df_rejeitadas['Respons√°vel'].value_counts()
            
            # Filtrar apenas desenvolvedores com pelo menos 2 rejei√ß√µes
            devs_relevantes = rejeicoes_por_dev[rejeicoes_por_dev >= 2]
            
            if not devs_relevantes.empty:
                # Pegar top 10 desenvolvedores com mais rejei√ß√µes
                top_devs = devs_relevantes.head(10)
                
                fig = px.bar(
                    x=top_devs.index,
                    y=top_devs.values,
                    title="üë®‚Äçüíª Total de Rejei√ß√µes por Desenvolvedor (min. 2 rejei√ß√µes)",
                    labels={'x': 'Desenvolvedor', 'y': 'Total de Rejei√ß√µes'},
                    text=top_devs.values,
                    color=top_devs.values,
                    color_continuous_scale=['#4ECDC4', '#45B7D1', '#FF6B6B']
                )
                
                fig.update_layout(
                    margin=dict(t=50, b=150, l=80, r=80),
                    height=550,
                    xaxis_tickangle=45,
                    showlegend=False
                )
                fig.update_traces(textposition='outside', textfont_size=12)
                return fig
    return None

def grafico_taxa_rejeicao_por_time(df_filtrado):
    """Gr√°fico da taxa de rejei√ß√£o por time"""
    if 'Time' in df_filtrado.columns and 'Status' in df_filtrado.columns:
        time_stats = df_filtrado.groupby('Time')['Status'].value_counts().unstack(fill_value=0)
        
        if not time_stats.empty:
            time_stats['Total'] = time_stats.sum(axis=1)
            time_stats['Taxa_Rejeicao'] = ((time_stats.get('REJEITADA', 0) / time_stats['Total']) * 100).round(1)
            time_stats = time_stats[time_stats['Total'] >= 3]  # Filtrar times com pelo menos 3 tasks
            
            if not time_stats.empty:
                chart_data = time_stats.reset_index().sort_values('Taxa_Rejeicao', ascending=False)
                
                fig = px.bar(
                    chart_data,
                    x='Time',
                    y='Taxa_Rejeicao',
                    title="üìä Taxa de Rejei√ß√£o por Time (min. 3 tasks)",
                    labels={'Time': 'Time de Desenvolvimento', 'Taxa_Rejeicao': 'Taxa de Rejei√ß√£o (%)'},
                    color='Taxa_Rejeicao',
                    color_continuous_scale=['#4ECDC4', '#45B7D1', '#6C5CE7'],
                    text='Taxa_Rejeicao'
                )
                fig.update_coloraxes(colorbar_title="Taxa de Rejei√ß√£o (%)")
                fig.update_layout(
                    margin=dict(t=50, b=120, l=120, r=80),
                    height=450
                )
                fig.update_traces(
                    texttemplate='%{text}%',
                    textposition='outside',
                    hovertemplate='Time: %{x}<br>Taxa: %{y}%<extra></extra>'
                )
                fig.update_xaxes(tickangle=45)
                return fig
    return None

def grafico_comparativo_testadores(df_filtrado):
    """Gr√°fico comparativo de produtividade entre testadores"""
    if 'Responsavel pelo teste' in df_filtrado.columns and 'Status' in df_filtrado.columns:
        testador_stats = df_filtrado.groupby('Responsavel pelo teste').agg({
            'Status': ['count', lambda x: (x == 'REJEITADA').sum(), lambda x: (x == 'APROVADA').sum()]
        }).round(1)
        
        testador_stats.columns = ['Total_Testes', 'Bugs_Encontrados', 'Testes_Aprovados']
        testador_stats['Taxa_Deteccao'] = (testador_stats['Bugs_Encontrados'] / testador_stats['Total_Testes'] * 100).round(1)
        testador_stats = testador_stats.reset_index()
        
        if not testador_stats.empty:
            fig = go.Figure()
            
            fig.add_trace(go.Bar(
                name='Total de Testes',
                x=testador_stats['Responsavel pelo teste'],
                y=testador_stats['Total_Testes'],
                yaxis='y',
                offsetgroup=1,
                marker_color='lightblue'
            ))
            
            fig.add_trace(go.Bar(
                name='Bugs Encontrados',
                x=testador_stats['Responsavel pelo teste'],
                y=testador_stats['Bugs_Encontrados'],
                yaxis='y',
                offsetgroup=2,
                marker_color='#FF6B6B'
            ))
            
            fig.add_trace(go.Scatter(
                name='Taxa de Detec√ß√£o (%)',
                x=testador_stats['Responsavel pelo teste'],
                y=testador_stats['Taxa_Deteccao'],
                yaxis='y2',
                mode='lines+markers',
                marker_color='orange',
                line=dict(width=3)
            ))
            
            fig.update_layout(
                title="üë• Comparativo de Performance entre Testadores",
                xaxis_title="Testador",
                yaxis=dict(title="Quantidade de Testes", side="left"),
                yaxis2=dict(title="Taxa de Detec√ß√£o (%)", side="right", overlaying="y"),
                legend=dict(x=0.01, y=0.99),
                hovermode='x unified',
                margin=dict(t=50, b=50, l=50, r=50),
                height=500
            )
            return fig
    return None



def metricas_resumo(df_filtrado, df_original, df_sem_teste=None):
    # Cabe√ßalho executivo
    st.markdown("#### üìà **Resumo Executivo - Impacto do Time de Qualidade**")
    
    # C√°lculos principais
    total_planilha = len(df_original)
    
    # Verificar se a coluna 'Responsavel pelo teste' existe
    if 'Responsavel pelo teste' in df_filtrado.columns:
        total_testes_efetuados = len(df_filtrado[df_filtrado['Responsavel pelo teste'].notna()])
    else:
        # Se n√£o existir, usar uma estimativa baseada em status diferentes de vazio
        total_testes_efetuados = len(df_filtrado[df_filtrado['Status'].notna()]) if 'Status' in df_filtrado.columns else len(df_filtrado)
    
    total_sem_teste = len(df_sem_teste) if df_sem_teste is not None else len(df_original[df_original['Motivo'].str.upper().str.contains('SEM TESTE', na=False)]) if 'Motivo' in df_original.columns else 0
    
    # M√©tricas de bugs
    df_rejeitadas = df_filtrado[df_filtrado['Status'] == 'REJEITADA'] if 'Status' in df_filtrado.columns else pd.DataFrame()
    total_bugs_encontrados = contar_total_bugs(df_rejeitadas) if not df_rejeitadas.empty else 0
    aprovadas = len(df_filtrado[df_filtrado['Status'] == 'APROVADA']) if 'Status' in df_filtrado.columns else 0
    
    # === SE√á√ÉO 1: M√âTRICAS DE VOLUME E COBERTURA ===
    st.markdown("##### üéØ **Volume de Trabalho e Cobertura**")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        cobertura_teste = (total_testes_efetuados / total_planilha * 100) if total_planilha > 0 else 0
        st.metric(
            "üìä Cobertura de Testes", 
            f"{cobertura_teste:.1f}%",
            delta=f"‚úÖ {total_testes_efetuados:,} testadas | üìã {total_planilha:,} total",
            help=f"Percentual de cobertura: {total_testes_efetuados:,} tarefas testadas de {total_planilha:,} tarefas totais. Meta recomendada: >80%"
        )
    
    with col2:
        if 'Nome da Task' in df_filtrado.columns:
            tarefas_unicas = df_filtrado['Nome da Task'].nunique()
        else:
            tarefas_unicas = 0
        st.metric(
            "üìã Tarefas Validadas", 
            f"{tarefas_unicas:,}",
            delta="üìù tarefas √∫nicas no per√≠odo",
            help="N√∫mero de tarefas diferentes que passaram por valida√ß√£o de qualidade no per√≠odo selecionado"
        )
    
    with col3:
        if 'Time' in df_filtrado.columns:
            times_atendidos = df_filtrado['Time'].nunique()
        else:
            times_atendidos = 0
        st.metric(
            "üè¢ Times Atendidos", 
            f"{times_atendidos}",
            delta="üë• equipes com cobertura QA",
            help="N√∫mero de times de desenvolvimento que receberam cobertura de Quality Assurance no per√≠odo"
        )
    
    # Removido: Equipe Q.A Ativa
    
    # === SE√á√ÉO 2: IMPACTO NA QUALIDADE ===
    st.markdown("##### üõ°Ô∏è **Impacto na Qualidade e Preven√ß√£o de Defeitos**")
    col5, col6, col7 = st.columns(3)
    
    with col5:
        st.metric(
            "üö´ Bugs Interceptados", 
            f"{total_bugs_encontrados:,}",
            delta="üõ°Ô∏è defeitos evitados em produ√ß√£o",
            help=f"Total de {total_bugs_encontrados:,} defeitos identificados e corrigidos antes da entrega ao cliente"
        )
    
    with col6:
        taxa_deteccao = (total_bugs_encontrados / total_testes_efetuados * 100) if total_testes_efetuados > 0 else 0
        rejeitadas = len(df_filtrado[df_filtrado['Status'] == 'REJEITADA']) if 'Status' in df_filtrado.columns else 0
        st.metric(
            "üîç Taxa de Detec√ß√£o", 
            f"{taxa_deteccao:.1f}%",
            delta=f"üö® {rejeitadas:,} testes c/ problemas | ‚úÖ {total_testes_efetuados - rejeitadas:,} aprovados",
            help=f"Percentual de testes que identificaram problemas: {rejeitadas:,} de {total_testes_efetuados:,} testes. Taxa ideal: 15-25% (indica qualidade adequada do c√≥digo)"
        )
    
    with col7:
        taxa_aprovacao = (aprovadas / total_testes_efetuados * 100) if total_testes_efetuados > 0 else 0
        st.metric(
            "‚úÖ Taxa de Aprova√ß√£o", 
            f"{taxa_aprovacao:.1f}%",
            delta=f"‚úÖ {aprovadas:,} aprovados | üö® {total_testes_efetuados - aprovadas:,} rejeitados",
            help=f"Percentual de aprova√ß√£o na primeira valida√ß√£o: {aprovadas:,} de {total_testes_efetuados:,} testes. Meta recomendada: >75%"
        )
    
    # === SE√á√ÉO 3: AN√ÅLISE DE ERROS ===
    if 'Erros' in df_filtrado.columns:
        st.markdown("##### üêõ **An√°lise de Erros Encontrados**")
        col_e1, col_e2, col_e3 = st.columns(3)
        
        with col_e1:
            total_erros = contar_total_erros(df_filtrado)
            tempo_correcao_estimado = total_erros * 45  # 45 min por erro em m√©dia
            st.metric(
                "üî¢ Total de Erros", 
                f"{total_erros:,}",
                delta=f"‚è±Ô∏è ‚âà{tempo_correcao_estimado/60:.1f}h de corre√ß√£o estimada",
                help=f"Total de {total_erros:,} erros identificados em {total_testes_efetuados:,} testes. Tempo estimado de corre√ß√£o: {tempo_correcao_estimado:,} minutos ({tempo_correcao_estimado/60:.1f} horas)"
            )
        
        with col_e2:
            media_erros = calcular_media_erros_por_teste(df_filtrado)
            classificacao = "Baixa" if media_erros < 2 else "M√©dia" if media_erros < 4 else "Alta"
            st.metric(
                "üìä M√©dia de Erros/Teste", 
                f"{media_erros:.1f}",
                delta=f"üìà Complexidade {classificacao.lower()}",
                help=f"M√©dia de {media_erros:.1f} erros por teste. Classifica√ß√£o: {classificacao} (Baixa: <2, M√©dia: 2-4, Alta: >4)"
            )
        
        with col_e3:
            distribuicao_erros = analisar_distribuicao_erros(df_filtrado)
            if distribuicao_erros:
                testes_com_erro = distribuicao_erros['testes_com_erro']
                total_testes_real = distribuicao_erros['total_testes']
                taxa_testes_com_erro = (testes_com_erro / total_testes_real * 100) if total_testes_real > 0 else 0
                testes_sem_erro = total_testes_real - testes_com_erro
                st.metric(
                    "‚ö†Ô∏è Taxa de Testes c/ Erro", 
                    f"{taxa_testes_com_erro:.1f}%",
                    delta=f"üö® {testes_com_erro:,} c/ erro | ‚úÖ {testes_sem_erro:,} limpos",
                    help=f"De {total_testes_real:,} testes realizados: {testes_com_erro:,} encontraram erros e {testes_sem_erro:,} foram aprovados sem problemas"
                )
    
    # === SE√á√ÉO 4: AN√ÅLISE DE RISCOS E PONTOS CR√çTICOS ===
    st.markdown("##### ‚ö†Ô∏è **An√°lise de Riscos e Pontos de Aten√ß√£o**")
    col9, col10, col11 = st.columns(3)
    
    with col9:
        if not df_rejeitadas.empty and 'Time' in df_rejeitadas.columns:
            bugs_por_time = contar_bugs_por_time(df_rejeitadas)
            if not bugs_por_time.empty:
                time_critico = bugs_por_time.index[0]
                bugs_time_critico = bugs_por_time.iloc[0]
                st.metric(
                    "üö® Time com Maior Risco", 
                    f"{time_critico}",
                    delta=f"üêõ {bugs_time_critico} defeitos encontrados",
                    delta_color="inverse",
                    help=f"Time {time_critico} apresentou {bugs_time_critico} defeitos no per√≠odo - requer aten√ß√£o especial e revis√£o de processos"
                )
    
    with col10:
        if not df_rejeitadas.empty:
            motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
            motivos_existentes = [col for col in motivos_cols if col in df_rejeitadas.columns]
            
            if motivos_existentes:
                todos_motivos = []
                for col in motivos_existentes:
                    motivos = df_rejeitadas[col].dropna().tolist()
                    todos_motivos.extend(motivos)
                
                if todos_motivos:
                    motivos_filtrados = [motivo for motivo in todos_motivos 
                                       if motivo.lower() not in ['aprovada', 'sem recusa'] and str(motivo).strip() != '']
                    
                    if motivos_filtrados:
                        motivo_mais_comum = pd.Series(motivos_filtrados).value_counts().index[0]
                        ocorrencias_motivo = pd.Series(motivos_filtrados).value_counts().iloc[0]
                        st.metric(
                            "üîç Principal Tipo de Defeito", 
                            motivo_mais_comum,
                            delta=f"üìä {ocorrencias_motivo}x identificado no per√≠odo",
                            delta_color="inverse",
                            help=f"Defeito mais frequente: '{motivo_mais_comum}' com {ocorrencias_motivo} ocorr√™ncias - oportunidade de melhoria no processo de desenvolvimento"
                        )
                    else:
                        st.metric(
                            "üîç Principal Tipo de Defeito", 
                            "Nenhum defeito",
                            delta="üìä Sem motivos v√°lidos no per√≠odo",
                            help="N√£o foram encontrados motivos de defeito v√°lidos no per√≠odo filtrado"
                        )
                else:
                    st.metric(
                        "üîç Principal Tipo de Defeito", 
                        "Sem dados",
                        delta="üìä Motivos n√£o preenchidos",
                        help="As colunas de motivos est√£o vazias para as tarefas rejeitadas"
                    )
            else:
                st.metric(
                    "üîç Principal Tipo de Defeito", 
                    "Colunas ausentes",
                    delta="üìä Motivo, Motivo2, Motivo3 n√£o encontradas",
                    help="As colunas de motivos n√£o foram encontradas nos dados"
                )
        else:
            st.metric(
                "üîç Principal Tipo de Defeito", 
                "Sem rejei√ß√µes",
                delta="üìä Nenhuma tarefa rejeitada no per√≠odo",
                help="N√£o h√° tarefas com status REJEITADA no per√≠odo filtrado"
            )
    
    with col11:
        taxa_sem_teste = (total_sem_teste / total_planilha * 100) if total_planilha > 0 else 0
        st.metric(
            "‚ö†Ô∏è Tarefas Sem Cobertura", 
            f"{taxa_sem_teste:.1f}%",
            delta=f"üö´ {total_sem_teste} sem teste | ‚úÖ {total_planilha - total_sem_teste} testadas",
            delta_color="inverse" if taxa_sem_teste > 20 else "normal",
            help=f"De {total_planilha} tarefas: {total_sem_teste} n√£o receberam valida√ß√£o ({taxa_sem_teste:.1f}%) e {total_planilha - total_sem_teste} foram testadas. Meta: <20% sem cobertura"
        )
    
    # === RESUMO EXECUTIVO REMOVIDO ===
    # Se√ß√£o removida conforme solicita√ß√£o


def main():
    # Navega√ß√£o entre m√≥dulos
    st.sidebar.title("Navega√ß√£o")
    modulo_selecionado = st.sidebar.radio(
        "Selecione o m√≥dulo:",
        ["üîç Qualidade (QA)", "üîß Sustenta√ß√£o"],
        help="Escolha entre o m√≥dulo de an√°lise de QA ou o m√≥dulo de sustenta√ß√£o"
    )
    
    if modulo_selecionado == "üîß Sustenta√ß√£o":
        if main_sustentacao:
            main_sustentacao()
        else:
            st.error("‚ùå M√≥dulo de sustenta√ß√£o n√£o dispon√≠vel")
        return
    
    # M√≥dulo de QA (c√≥digo original)
    # T√≠tulo principal
    st.title("üîç Dashboard de M√©tricas Q.A DelTech")
    
    # Subt√≠tulo ser√° atualizado ap√≥s aplicar filtros
    placeholder_subtitulo = st.empty()
    st.markdown("---")
    
    df = carregar_dados()
    
    if df is not None:
        df = processar_dados(df)
        
        # Filtros avan√ßados
        st.subheader("üîç Filtros Avan√ßados")
        
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            sprints_disponiveis = ['Todos'] + sorted(df['Sprint'].dropna().unique().tolist()) if 'Sprint' in df.columns else ['Todos']
            sprint_selecionado = st.selectbox("Filtrar por Sprint:", sprints_disponiveis)
        
        with col2:
            status_disponiveis = ['Todos'] + sorted(df['Status'].dropna().unique().tolist()) if 'Status' in df.columns else ['Todos']
            status_selecionado = st.selectbox("Filtrar por Status:", status_disponiveis)
        
        with col3:
            times_disponiveis = ['Todos'] + sorted(df['Time'].dropna().unique().tolist()) if 'Time' in df.columns else ['Todos']
            time_selecionado = st.selectbox("Filtrar por Time:", times_disponiveis)
        
        with col4:
            devs_disponiveis = ['Todos'] + sorted(df['Respons√°vel'].dropna().unique().tolist()) if 'Respons√°vel' in df.columns else ['Todos']
            dev_selecionado = st.selectbox("Filtrar por Desenvolvedor:", devs_disponiveis)
        
        with col5:
            if 'Data' in df.columns and not df['Data'].dropna().empty:
                data_min = df['Data'].min().date()
                data_max = df['Data'].max().date()
                data_range = st.date_input(
                    "Per√≠odo:",
                    value=(data_min, data_max),
                    min_value=data_min,
                    max_value=data_max
                )
            else:
                data_range = None
        
        # Aplicar filtros
        df_filtrado = df.copy()
        
        if sprint_selecionado != 'Todos':
            df_filtrado = df_filtrado[df_filtrado['Sprint'] == sprint_selecionado]
        
        if status_selecionado != 'Todos':
            df_filtrado = df_filtrado[df_filtrado['Status'] == status_selecionado]
        
        if time_selecionado != 'Todos':
            df_filtrado = df_filtrado[df_filtrado['Time'] == time_selecionado]
        
        if dev_selecionado != 'Todos':
            df_filtrado = df_filtrado[df_filtrado['Respons√°vel'] == dev_selecionado]
        
        if data_range and len(data_range) == 2 and 'Data' in df.columns:
            df_filtrado = df_filtrado[
                (df_filtrado['Data'].dt.date >= data_range[0]) & 
                (df_filtrado['Data'].dt.date <= data_range[1])
            ]
        
        # Verificar se h√° filtros ativos
        filtros_ativos = (
            sprint_selecionado != 'Todos' or 
            status_selecionado != 'Todos' or 
            time_selecionado != 'Todos' or 
            dev_selecionado != 'Todos' or 
            (data_range and len(data_range) == 2)
        )
        
        # Separar dados com e sem teste
        df_original = df_filtrado if filtros_ativos else df
        df_com_teste, df_sem_teste = separar_dados_sem_teste(df_original)
        
        # Atualizar subt√≠tulo din√¢mico
        if data_range and len(data_range) == 2:
            periodo_texto = f"{data_range[0].strftime('%d/%m')} a {data_range[1].strftime('%d/%m')}"
        else:
            periodo_texto = "Per√≠odo completo"
        
        data_atualizacao = datetime.now().strftime("%B %Y")
        placeholder_subtitulo.markdown(
            f"**Per√≠odo filtrado:** {periodo_texto} | **Dados atualizados at√©:** {data_atualizacao}"
        )
        
        if filtros_ativos and not df_com_teste.empty:
            st.info(f"Mostrando {len(df_com_teste)} testes efetuados de {len(df_original)} registros totais.")
        
        st.markdown("---")
        
        # Criar abas para organizar o dashboard
        tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs(["üìå Vis√£o Geral Estrat√©gica", "üõ°Ô∏è Preven√ß√£o e Qualidade", "üèÅ Vis√£o por Sprint", "üßë‚Äçü§ù‚Äçüßë Vis√£o por Testador", "üìã Tarefas Sem Teste", "üî¢ An√°lise de Erros", "üêõ An√°lise de Bugs", "üìä Relat√≥rio P.M."])
        
        with tab1:
            st.markdown("### üìå **Vis√£o Geral Estrat√©gica**")
            st.markdown("*Dashboard Executivo - Impacto e Performance do Time de Qualidade*")
            
            # === RESUMO EXECUTIVO PARA DIRETORIA ===
            st.markdown("#### üéØ **Resumo Executivo - Principais Indicadores**")
            
            # Calcular m√©tricas principais para o resumo
            total_planilha = len(df)
            total_testes_efetuados = len(df_com_teste)
            cobertura_teste = (total_testes_efetuados / total_planilha * 100) if total_planilha > 0 else 0
            aprovadas = len(df_com_teste[df_com_teste['Status'] == 'APROVADA']) if 'Status' in df_com_teste.columns else 0
            rejeitadas = len(df_com_teste[df_com_teste['Status'] == 'REJEITADA']) if 'Status' in df_com_teste.columns else 0
            taxa_aprovacao = (aprovadas / total_testes_efetuados * 100) if total_testes_efetuados > 0 else 0
            
            # Resumo em destaque
            col_resumo1, col_resumo2, col_resumo3 = st.columns(3)
            
            with col_resumo1:
                status_cobertura = "üü¢ Excelente" if cobertura_teste >= 80 else "üü° Boa" if cobertura_teste >= 60 else "üî¥ Cr√≠tica"
                st.info(f"**üìä Cobertura de Testes:** {cobertura_teste:.1f}% ({total_testes_efetuados:,}/{total_planilha:,} tarefas)\n\n**Status:** {status_cobertura}")
            
            with col_resumo2:
                status_qualidade = "üü¢ Excelente" if taxa_aprovacao >= 75 else "üü° Boa" if taxa_aprovacao >= 60 else "üî¥ Aten√ß√£o"
                st.info(f"**‚úÖ Taxa de Aprova√ß√£o:** {taxa_aprovacao:.1f}% ({aprovadas:,}/{total_testes_efetuados:,} testes)\n\n**Status:** {status_qualidade}")
            
            with col_resumo3:
                bugs_encontrados = contar_total_bugs(df_com_teste[df_com_teste['Status'] == 'REJEITADA']) if not df_com_teste.empty else 0
                st.info(f"**üö´ Bugs Interceptados:** {bugs_encontrados:,} problemas\n\n**Status:** Problemas identificados antes da produ√ß√£o")
            
            st.markdown("---")
            
            # M√©tricas executivas principais
            metricas_resumo(df_com_teste, df, df_sem_teste)
            
            st.markdown("---")
            
            # === INSIGHTS ESTRAT√âGICOS REMOVIDOS ===
            # Se√ß√£o removida conforme solicita√ß√£o
            
            st.markdown("---")
            
            # Gr√°ficos estrat√©gicos
            st.markdown("#### üìä **Indicadores Visuais Estrat√©gicos**")
            
            col_exec1, col_exec2 = st.columns(2)
            
            with col_exec1:
                # Gr√°fico de evolu√ß√£o da qualidade
                fig_evolucao = grafico_evolucao_qualidade(df_com_teste)
                if fig_evolucao:
                    st.plotly_chart(fig_evolucao, use_container_width=True, key="evolucao_qualidade")
                
                # Distribui√ß√£o de status
                fig_status = grafico_status_distribuicao(df_com_teste)
                if fig_status:
                    st.plotly_chart(fig_status, use_container_width=True, key="distribuicao_status")
            
            with col_exec2:
                # Erros por time (cr√≠tico para diretoria)
                fig_erros_time = grafico_erros_por_time(df_com_teste)
                if fig_erros_time:
                    st.plotly_chart(fig_erros_time, use_container_width=True, key="erros_por_time_exec")
                
                # Taxa de rejei√ß√£o por time
                fig_taxa_rejeicao = grafico_taxa_rejeicao_por_time(df_com_teste)
                if fig_taxa_rejeicao:
                    st.plotly_chart(fig_taxa_rejeicao, use_container_width=True, key="taxa_rejeicao_exec")
            
            st.markdown("---")
            
            # === RECOMENDA√á√ïES ESTRAT√âGICAS PARA DIRETORIA ===
            st.markdown("#### üéØ **Recomenda√ß√µes Estrat√©gicas**")
            
            if not df_com_teste.empty:
                # Calcular m√©tricas para recomenda√ß√µes
                total_testes = len(df_com_teste)
                aprovados = len(df_com_teste[df_com_teste['Status'] == 'APROVADA'])
                rejeitados = len(df_com_teste[df_com_teste['Status'] == 'REJEITADA'])
                taxa_aprovacao = (aprovados / total_testes * 100) if total_testes > 0 else 0
                
                col_rec1, col_rec2, col_rec3 = st.columns(3)
                
                with col_rec1:
                    if taxa_aprovacao >= 80:
                        st.success(f"**‚úÖ QUALIDADE EXCELENTE**\n\nTaxa de aprova√ß√£o: {taxa_aprovacao:.1f}%\n\n**A√ß√£o:** Manter padr√£o atual e documentar boas pr√°ticas para replica√ß√£o.")
                    elif taxa_aprovacao >= 60:
                        st.warning(f"**‚ö†Ô∏è QUALIDADE MODERADA**\n\nTaxa de aprova√ß√£o: {taxa_aprovacao:.1f}%\n\n**A√ß√£o:** Implementar treinamentos espec√≠ficos nos times com maior rejei√ß√£o.")
                    else:
                        st.error(f"**üö® QUALIDADE CR√çTICA**\n\nTaxa de aprova√ß√£o: {taxa_aprovacao:.1f}%\n\n**A√ß√£o:** Interven√ß√£o imediata necess√°ria - revisar processos de desenvolvimento.")
                
                with col_rec2:
                    # An√°lise de Efici√™ncia
                    bugs_interceptados = contar_total_bugs(df_com_teste[df_com_teste['Status'] == 'REJEITADA'])
                    eficiencia = (bugs_interceptados / total_testes * 100) if total_testes > 0 else 0
                    
                    if eficiencia >= 30:
                        st.success(f"**üéØ EFICI√äNCIA ALTA**\n\nDetec√ß√£o: {eficiencia:.1f}%\n\n**{bugs_interceptados} bugs** encontrados em **{total_testes} testes**")
                    elif eficiencia >= 15:
                        st.info(f"**üìä EFICI√äNCIA MODERADA**\n\nDetec√ß√£o: {eficiencia:.1f}%\n\n**{bugs_interceptados} bugs** encontrados em **{total_testes} testes**")
                    else:
                        st.warning(f"**‚ö†Ô∏è BAIXA DETEC√á√ÉO**\n\nDetec√ß√£o: {eficiencia:.1f}%\n\n**A√ß√£o:** Revisar crit√©rios de teste para melhor detec√ß√£o.")
                
                with col_rec3:
                    # An√°lise de cobertura
                    total_tasks = len(df) if not df.empty else 0
                    cobertura = (total_testes / total_tasks * 100) if total_tasks > 0 else 0
                    
                    if cobertura >= 90:
                        st.success(f"**üéØ COBERTURA EXCELENTE**\n\nCobertura: {cobertura:.1f}%\n\n**Status:** Meta de cobertura atingida com sucesso.")
                    elif cobertura >= 70:
                        st.warning(f"**üìä COBERTURA MODERADA**\n\nCobertura: {cobertura:.1f}%\n\n**A√ß√£o:** Expandir cobertura para atingir meta de 90%.")
                    else:
                        st.error(f"**üö® COBERTURA BAIXA**\n\nCobertura: {cobertura:.1f}%\n\n**A√ß√£o:** Urgente - aumentar significativamente a cobertura de testes.")
                
                # Resumo executivo final
                st.markdown("##### üìã **Resumo Executivo para Diretoria**")
                
                resumo_status = "üü¢ SAUD√ÅVEL" if taxa_aprovacao >= 70 and cobertura >= 70 else "üü° ATEN√á√ÉO" if taxa_aprovacao >= 50 and cobertura >= 50 else "üî¥ CR√çTICO"
                
                st.info(f"**Status Geral do QA:** {resumo_status}\n\n"
                       f"‚Ä¢ **{total_testes:,} testes** realizados com **{taxa_aprovacao:.1f}% de aprova√ß√£o**\n"
                       f"‚Ä¢ **{bugs_interceptados} bugs interceptados** antes da produ√ß√£o\n"
                       f"‚Ä¢ **Cobertura de {cobertura:.1f}%** das tasks de desenvolvimento\n"
                       f"‚Ä¢ **Efici√™ncia de detec√ß√£o:** {(bugs_interceptados/total_testes*100):.1f}% dos testes encontraram problemas")
            else:
                st.info("üìã Dados insuficientes para gerar recomenda√ß√µes estrat√©gicas")
        
        with tab2:
            st.markdown("### üõ°Ô∏è **Preven√ß√£o e Qualidade**")
            st.markdown("*An√°lise unificada: bugs identificados (motivos) + erros encontrados (quantitativos)*")
            
            # An√°lise unificada de qualidade
            analise_unificada = analisar_qualidade_unificada(df_com_teste)
            
            if analise_unificada:
                # Se√ß√£o de compara√ß√£o entre as duas abordagens
                st.markdown("#### üìä **Vis√£o Comparativa: Motivos vs Erros Num√©ricos**")
                
                col_comp1, col_comp2, col_comp3, col_comp4 = st.columns(4)
                
                with col_comp1:
                    bugs_motivos = analise_unificada['bugs_qualitativos']['total_bugs_motivos']
                    st.metric(
                        "üêõ Bugs por Motivos", 
                        f"{bugs_motivos}",
                        help="Total de bugs identificados atrav√©s dos motivos de rejei√ß√£o (an√°lise qualitativa)"
                    )
                
                with col_comp2:
                    erros_numericos = analise_unificada['total_erros_numericos']
                    st.metric(
                        "üî¢ Erros Num√©ricos", 
                        f"{erros_numericos}",
                        help="Total de erros contabilizados na coluna 'Erros' (an√°lise quantitativa)"
                    )
                
                with col_comp3:
                    taxa_rejeicao = analise_unificada['metricas_comparativas']['taxa_rejeicao']
                    st.metric(
                        "üìâ Taxa de Rejei√ß√£o", 
                        f"{taxa_rejeicao:.1f}%",
                        help="Percentual de testes rejeitados (com motivos de falha)"
                    )
                
                with col_comp4:
                    taxa_erros = analise_unificada['metricas_comparativas']['taxa_erros_numericos']
                    st.metric(
                        "‚ö†Ô∏è Taxa c/ Erros", 
                        f"{taxa_erros:.1f}%",
                        help="Percentual de testes que encontraram erros (coluna num√©rica)"
                    )
                
                # Explica√ß√£o das diferen√ßas
                st.info("""
                üí° **Entendendo as M√©tricas:**
                
                - **Bugs por Motivos**: An√°lise qualitativa baseada nos motivos de rejei√ß√£o (Motivo, Motivo2, Motivo3)
                - **Erros Num√©ricos**: An√°lise quantitativa baseada na coluna 'Erros' que conta o n√∫mero de erros encontrados
                - **Taxa de Rejei√ß√£o**: Percentual de testes que foram rejeitados por algum motivo
                - **Taxa c/ Erros**: Percentual de testes que encontraram pelo menos um erro num√©rico
                
                Ambas as m√©tricas s√£o complementares e oferecem perspectivas diferentes sobre a qualidade.
                """)
                
                st.markdown("---")
            
            # An√°lise de bugs e qualidade
            st.markdown("#### üö® **Bugs Identificados por Time**")
            
            col_bugs1, col_bugs2 = st.columns(2)
            
            with col_bugs1:
                # Gr√°fico de barras para bugs por time
                fig_erros_time = grafico_erros_por_time(df_com_teste)
                if fig_erros_time:
                    # Melhorar cores e adicionar anota√ß√µes
                    try:
                        if (fig_erros_time.data and len(fig_erros_time.data) > 0 and 
                            hasattr(fig_erros_time.data[0], 'y') and 
                            hasattr(fig_erros_time.data[0], 'x') and 
                            fig_erros_time.data[0].y is not None and 
                            len(fig_erros_time.data[0].y) > 0):
                            
                            y_values = list(fig_erros_time.data[0].y)
                            x_values = list(fig_erros_time.data[0].x)
                            fig_erros_time.update_traces(
                                marker_color=['#FF6B6B' if i == 0 else '#4ECDC4' for i in range(len(x_values))],
                                text=[f'üö® Foco priorit√°rio' if i == 0 else f'‚úÖ {y_values[i]} bugs' for i in range(len(x_values))],
                                textposition='outside'
                            )
                        else:
                            fig_erros_time.update_traces(
                                marker_color='#4ECDC4'
                            )
                    except (AttributeError, IndexError, TypeError):
                        # Fallback para casos onde os dados n√£o est√£o no formato esperado
                        fig_erros_time.update_traces(
                            marker_color='#4ECDC4'
                        )
                    fig_erros_time.update_layout(title_font_color='#FFFFFF')
                    st.plotly_chart(fig_erros_time, use_container_width=True, key="bugs_por_time_principal")
            
            with col_bugs2:
                # Gr√°fico de pizza para distribui√ß√£o de bugs
                if not df_com_teste.empty and 'Time' in df_com_teste.columns:
                    df_rejeitadas = df_com_teste[df_com_teste['Status'] == 'REJEITADA']
                    if not df_rejeitadas.empty:
                        bugs_por_time = contar_bugs_por_time(df_rejeitadas)
                        if not bugs_por_time.empty:
                            import plotly.express as px
                            fig_pizza = px.pie(
                                values=bugs_por_time.values,
                                names=bugs_por_time.index,
                                title="ü•ß Distribui√ß√£o de Bugs por Time",
                                color_discrete_sequence=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4']
                            )
                            fig_pizza.update_layout(title_font_color='#FFFFFF')
                            st.plotly_chart(fig_pizza, use_container_width=True, key="distribuicao_bugs_pizza")
            
            st.markdown("---")
            
            # Nova se√ß√£o de compara√ß√£o visual
            if analise_unificada:
                st.markdown("#### üîÑ **Compara√ß√£o Visual: Duas Perspectivas de Qualidade**")
                
                col_comp_visual1, col_comp_visual2 = st.columns(2)
                
                with col_comp_visual1:
                    st.markdown("##### üìù **An√°lise Qualitativa (Motivos)**")
                    
                    # Gr√°fico de motivos de rejei√ß√£o
                    fig_motivos = grafico_motivos_rejeicao(df_com_teste)
                    if fig_motivos:
                        fig_motivos.update_traces(
                            marker_color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57'],
                            text=[f'‚úÖ Mais comum' if i == 0 else '' for i in range(len(fig_motivos.data[0].x))],
                            textposition='outside'
                        )
                        fig_motivos.update_layout(title_font_color='#FFFFFF')
                        st.plotly_chart(fig_motivos, use_container_width=True, key="motivos_rejeicao_principal")
                    
                    # Insights sobre motivos
                    motivos_analysis = analise_unificada['bugs_qualitativos']['motivos_analysis']
                    if motivos_analysis and 'motivo_mais_comum' in motivos_analysis and motivos_analysis['motivo_mais_comum']:
                        st.success(f"üéØ **Motivo mais comum**: {motivos_analysis['motivo_mais_comum']}")
                    else:
                        # Fallback: buscar diretamente nos dados
                        df_rejeitadas = df_com_teste[df_com_teste['Status'] == 'REJEITADA'] if 'Status' in df_com_teste.columns else pd.DataFrame()
                        if not df_rejeitadas.empty:
                            motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
                            todos_motivos = []
                            for col in motivos_cols:
                                if col in df_rejeitadas.columns:
                                    motivos = df_rejeitadas[col].dropna().tolist()
                                    todos_motivos.extend(motivos)
                            
                            if todos_motivos:
                                motivos_filtrados = [motivo for motivo in todos_motivos 
                                                   if motivo.lower() not in ['aprovada', 'sem recusa', '']]
                                if motivos_filtrados:
                                    motivo_mais_comum = pd.Series(motivos_filtrados).value_counts().index[0]
                                    ocorrencias = pd.Series(motivos_filtrados).value_counts().iloc[0]
                                    st.success(f"üéØ **Motivo mais comum**: {motivo_mais_comum} ({ocorrencias} ocorr√™ncias)")
                                else:
                                    st.info("üìù Nenhum motivo espec√≠fico identificado nos dados filtrados")
                            else:
                                st.info("üìù Nenhum motivo registrado nos dados dispon√≠veis")
                        else:
                            st.info("üìù Nenhuma tarefa rejeitada encontrada nos dados filtrados")
                
                with col_comp_visual2:
                    st.markdown("##### üî¢ **An√°lise Quantitativa (Erros)**")
                    
                    # Gr√°fico de distribui√ß√£o de erros
                    fig_dist_erros = grafico_distribuicao_erros(df_com_teste)
                    if fig_dist_erros:
                        st.plotly_chart(fig_dist_erros, use_container_width=True, key="distribuicao_erros_comparativo")
                    
                    # Gr√°fico de erros por time (coluna num√©rica)
                    fig_erros_numericos = grafico_erros_coluna_por_time(df_com_teste)
                    if fig_erros_numericos:
                        st.plotly_chart(fig_erros_numericos, use_container_width=True, key="erros_numericos_time")
                
                # Explica√ß√£o detalhada das diferen√ßas
                st.markdown("#### üìö **Entendendo as Duas Abordagens de An√°lise**")
                
                st.info("""
                **üîç Diferen√ßas entre as M√©tricas:**
                
                **üìù An√°lise Qualitativa (Motivos):**
                - Baseada nas colunas 'Motivo', 'Motivo2', 'Motivo3'
                - Identifica **tipos de problemas** encontrados
                - Foca na **natureza dos defeitos** (ex: erro de l√≥gica, interface, etc.)
                - √ötil para **preven√ß√£o** e melhoria de processos
                
                **üî¢ An√°lise Quantitativa (Erros):**
                - Baseada na coluna num√©rica 'Erros'
                - Conta **quantidade total** de erros encontrados
                - Foca no **volume de problemas** por teste
                - √ötil para **m√©tricas de produtividade** e efici√™ncia
                
                **üí° Por que usar ambas?**
                - **Complementares**: Uma mostra 'o qu√™', outra mostra 'quanto'
                - **Vis√£o completa**: Qualidade + Quantidade = An√°lise robusta
                - **Decis√µes melhores**: Dados qualitativos + quantitativos
                """)
                
                st.markdown("---")
            
            st.markdown("#### üîç **Tipos de Falha e Motivos**")
            
            col_motivos1, col_motivos2 = st.columns(2)
            
            with col_motivos1:
                # Taxa de aprova√ß√£o vs rejei√ß√£o (barras + pizza)
                if not df_com_teste.empty and 'Status' in df_com_teste.columns:
                    status_counts = df_com_teste['Status'].value_counts()
                    if len(status_counts) > 1:
                        import plotly.express as px
                        st.markdown("**üìä An√°lise Qualitativa - Motivos de Rejei√ß√£o**")
                        st.info("Esta se√ß√£o foca nos motivos e causas dos problemas encontrados, permitindo identificar padr√µes e oportunidades de melhoria no processo de desenvolvimento.")
            
            with col_motivos2:
                # Taxa de aprova√ß√£o vs rejei√ß√£o (barras + pizza)
                if not df_com_teste.empty and 'Status' in df_com_teste.columns:
                    status_counts = df_com_teste['Status'].value_counts()
                    if len(status_counts) > 1:
                        import plotly.express as px
                        fig_aprovacao = px.bar(
                            x=status_counts.index,
                            y=status_counts.values,
                            title="üìä Taxa de Aprova√ß√£o vs Rejei√ß√£o",
                            color=status_counts.values,
                            color_discrete_sequence=['#4ECDC4', '#FF6B6B'],
                            text=status_counts.values
                        )
                        fig_aprovacao.update_traces(textposition='outside')
                        fig_aprovacao.update_layout(
                            title_font_color='#FFFFFF',
                            xaxis_title="Status",
                            yaxis_title="Quantidade",
                            margin=dict(t=50, b=80, l=80, r=80),
                            height=450
                        )
                        st.plotly_chart(fig_aprovacao, use_container_width=True, key="taxa_aprovacao_barras")
            
            st.markdown("---")
            st.markdown("#### üéØ **An√°lise Detalhada de Motivos por Time**")
            
            col_time1, col_time2 = st.columns(2)
            
            with col_time1:
                # Gr√°fico de motivos por time
                fig_motivos_time = grafico_motivos_por_time(df_com_teste)
                if fig_motivos_time:
                    st.plotly_chart(fig_motivos_time, use_container_width=True, key="motivos_por_time")
                else:
                    st.info("üìã Dados insuficientes para an√°lise de motivos por time")
            
            with col_time2:
                # Ranking dos problemas mais encontrados
                fig_ranking = grafico_ranking_problemas(df_com_teste)
                if fig_ranking:
                    st.plotly_chart(fig_ranking, use_container_width=True, key="ranking_problemas")
                else:
                    st.info("üìã Dados insuficientes para ranking de problemas")
            
            st.markdown("---")
            st.markdown("#### üë®‚Äçüíª **An√°lise Detalhada por Desenvolvedor**")
            
            col_dev1, col_dev2 = st.columns(2)
            
            with col_dev1:
                # Gr√°fico sunburst de motivos por desenvolvedor
                fig_motivos_dev_sun = grafico_motivos_por_desenvolvedor(df_com_teste)
                if fig_motivos_dev_sun:
                    st.plotly_chart(fig_motivos_dev_sun, use_container_width=True, key="motivos_por_desenvolvedor")
                else:
                    st.info("üìã Dados insuficientes para an√°lise de motivos por desenvolvedor")
            
            with col_dev2:
                # Gr√°fico de barras: Motivos de recusa por desenvolvedor
                fig_motivos_dev = grafico_motivos_recusa_por_dev(df_com_teste)
                if fig_motivos_dev:
                    st.plotly_chart(fig_motivos_dev, use_container_width=True, key="motivos_recusa_por_dev")
                else:
                    st.info("üìã Dados insuficientes para an√°lise de rejei√ß√µes por desenvolvedor (m√≠nimo 2 rejei√ß√µes por dev)")
            
            st.markdown("---")
            
            # === INSIGHTS EXECUTIVOS PARA GER√äNCIA ===
            st.markdown("#### üéØ **Insights Executivos - An√°lise de Problemas por Time**")
            
            if not df_com_teste.empty:
                df_rejeitadas = df_com_teste[df_com_teste['Status'] == 'REJEITADA']
                
                if not df_rejeitadas.empty and 'Time' in df_rejeitadas.columns:
                    # An√°lise de problemas por time
                    motivos_cols = ['Motivo', 'Motivo2', 'Motivo3']
                    motivos_existentes = [col for col in motivos_cols if col in df_rejeitadas.columns]
                    
                    if motivos_existentes:
                        dados_analise = []
                        for _, row in df_rejeitadas.iterrows():
                            time = row.get('Time', 'N/A')
                            for col in motivos_existentes:
                                motivo = row.get(col)
                                if pd.notna(motivo) and motivo.lower() not in ['aprovada', 'sem recusa', '']:
                                    dados_analise.append({'Time': time, 'Motivo': motivo})
                        
                        if dados_analise:
                            df_analise = pd.DataFrame(dados_analise)
                            
                            col_insight1, col_insight2 = st.columns(2)
                            
                            with col_insight1:
                                # Time com mais problemas
                                problemas_por_time = df_analise['Time'].value_counts()
                                time_critico = problemas_por_time.index[0]
                                qtd_problemas = problemas_por_time.iloc[0]
                                
                                st.error(f"**üö® Time com Maior Necessidade de Aten√ß√£o**\n\n**{time_critico}** - {qtd_problemas} problemas identificados\n\nRecomenda√ß√£o: Revisar processos e oferecer treinamento espec√≠fico.")
                            
                            with col_insight2:
                                # Problema mais comum
                                problema_comum = df_analise['Motivo'].value_counts().index[0]
                                qtd_comum = df_analise['Motivo'].value_counts().iloc[0]
                                
                                st.warning(f"**‚ö†Ô∏è Problema Mais Recorrente**\n\n**{problema_comum}** - {qtd_comum} ocorr√™ncias\n\nRecomenda√ß√£o: Implementar checklist preventivo para este tipo de erro.")
                            
                            # An√°lise de distribui√ß√£o de problemas
                            st.markdown("##### üìä **Distribui√ß√£o de Problemas por Time**")
                            
                            col_dist1, col_dist2 = st.columns(2)
                            
                            with col_dist1:
                                # Tabela de problemas por time
                                tabela_problemas = df_analise.groupby('Time').agg({
                                    'Motivo': ['count', lambda x: x.nunique()]
                                }).round(2)
                                tabela_problemas.columns = ['Total Problemas', 'Tipos Diferentes']
                                tabela_problemas = tabela_problemas.sort_values('Total Problemas', ascending=False)
                                
                                st.dataframe(
                                    tabela_problemas,
                                    use_container_width=True,
                                    column_config={
                                        "Total Problemas": st.column_config.NumberColumn(
                                            "Total de Problemas",
                                            help="Quantidade total de problemas encontrados"
                                        ),
                                        "Tipos Diferentes": st.column_config.NumberColumn(
                                            "Tipos Diferentes",
                                            help="Variedade de tipos de problemas"
                                        )
                                    }
                                )
                            
                            with col_dist2:
                                # Top 5 problemas mais comuns
                                top_problemas = df_analise['Motivo'].value_counts().head(5)
                                
                                st.markdown("**üèÜ Top 5 Problemas Mais Comuns:**")
                                for i, (problema, qtd) in enumerate(top_problemas.items(), 1):
                                    st.markdown(f"{i}. **{problema}** - {qtd} ocorr√™ncias")
                        else:
                            st.info("üìã Nenhum motivo de rejei√ß√£o encontrado para an√°lise")
                    else:
                        st.info("üìã Colunas de motivos n√£o encontradas nos dados")
                else:
                    st.info("üìã Dados insuficientes para an√°lise de problemas por time")
            else:
                st.info("üìã Nenhum dado dispon√≠vel para an√°lise")
            
            st.markdown("---")
            st.markdown("#### üìà **Evolu√ß√£o de Taxa ao Longo do Tempo**")
            
            # Melhorar gr√°fico de evolu√ß√£o
            fig_evolucao = grafico_evolucao_qualidade(df_com_teste)
            if fig_evolucao:
                # Melhorar escala do eixo Y para mostrar varia√ß√µes reais
                fig_evolucao.update_layout(
                    yaxis=dict(
                        title="Taxa de Aprova√ß√£o (%)",
                        range=[0, 100],
                        dtick=10
                    ),
                    title_font_color='#FFFFFF',
                    annotations=[
                        dict(
                            x=0.5, y=1.1,
                            xref='paper', yref='paper',
                            text="üí° Dica: Busque tend√™ncia de melhoria cont√≠nua",
                            showarrow=False,
                            font=dict(size=12, color='#7F8C8D')
                        )
                    ]
                )
                st.plotly_chart(fig_evolucao, use_container_width=True, key="evolucao_qualidade_melhorada")
        
        with tab3:
            st.markdown("### üèÅ **Vis√£o por Sprint**")
            st.markdown("*Tasks testadas por sprint e cobertura de Q.A por time*")
            
            # An√°lise por Sprint
            st.markdown("#### üìä **Tasks Testadas por Sprint**")
            
            # Timeline de tasks
            with st.container():
                # Timeline de tasks
                fig_timeline = grafico_timeline_tasks(df_com_teste)
                if fig_timeline:
                    fig_timeline.update_layout(title_font_color='#FFFFFF')
                    st.plotly_chart(fig_timeline, use_container_width=True, key="timeline_tasks")
            
            st.markdown("---")
            st.markdown("#### üéØ **Cobertura de Q.A por Time**")
            
            col_cobertura1, col_cobertura2 = st.columns(2)
            
            with col_cobertura1:
                fig_time = grafico_tasks_por_time(df_com_teste)
                if fig_time:
                    fig_time.update_layout(
                        title_font_color='#FFFFFF',
                        xaxis_tickangle=45
                    )
                    st.plotly_chart(fig_time, use_container_width=True, key="tasks_por_time_sprint")
            
            with col_cobertura2:
                # Distribui√ß√£o de status
                fig_status = grafico_status_distribuicao(df_com_teste)
                if fig_status:
                    fig_status.update_layout(title_font_color='#FFFFFF')
                    st.plotly_chart(fig_status, use_container_width=True, key="status_distribuicao_sprint")
        
        with tab4:
            st.markdown("### üßë‚Äçü§ù‚Äçüßë **Vis√£o por Testador**")
            st.markdown("*Ranking de performance, produtividade e compara√ß√£o entre testadores*")
            
            if 'Responsavel pelo teste' in df_com_teste.columns and not df_com_teste.empty:
                testador_stats = df_com_teste.groupby('Responsavel pelo teste').agg({
                    'Status': ['count', lambda x: (x == 'REJEITADA').sum(), lambda x: (x == 'APROVADA').sum()]
                }).round(1)
                
                testador_stats.columns = ['Total_Testes', 'Bugs_Encontrados', 'Testes_Aprovados']
                testador_stats['Taxa_Deteccao'] = (testador_stats['Bugs_Encontrados'] / testador_stats['Total_Testes'] * 100).round(1)
                testador_stats['Taxa_Aprovacao'] = (testador_stats['Testes_Aprovados'] / testador_stats['Total_Testes'] * 100).round(1)
                testador_stats['Produtividade'] = testador_stats['Total_Testes']
                testador_stats = testador_stats.reset_index()
                
                # Insights destacados
                st.markdown("#### üí° **Insights de Performance**")
                
                total_tarefas = testador_stats['Total_Testes'].sum()
                media_aprovacao = testador_stats['Taxa_Aprovacao'].mean()
                
                col_insight1, col_insight2 = st.columns(2)
                
                with col_insight1:
                    testadores_nomes = ' e '.join(testador_stats['Responsavel pelo teste'].tolist())
                    st.success(f"üéØ **Efici√™ncia por pessoa:** {testadores_nomes} juntos validaram {int(total_tarefas)} tarefas com taxa de aprova√ß√£o m√©dia de {media_aprovacao:.1f}%.")
                
                with col_insight2:
                    acima_media = testador_stats[testador_stats['Taxa_Aprovacao'] >= media_aprovacao]
                    if len(acima_media) >= 2:
                        st.info(f"‚≠ê **Qualidade similar:** Ambos testadores entregaram acima da m√©dia com qualidade similar ‚Äî excelente consist√™ncia da equipe!")
                
                st.markdown("---")
                st.markdown("#### üìä **Compara√ß√£o Visual de Performance**")
                
                # Gr√°fico de compara√ß√£o
                col_graf1, col_graf2 = st.columns(2)
                
                with col_graf1:
                    # Gr√°fico de barras comparativo - Produtividade
                    import plotly.express as px
                    fig_prod = px.bar(
                        testador_stats,
                        x='Responsavel pelo teste',
                        y='Total_Testes',
                        title='üìà Comparativo de Produtividade',
                        color='Total_Testes',
                        color_continuous_scale=['#4ECDC4', '#45B7D1'],
                        text='Total_Testes'
                    )
                    fig_prod.update_traces(textposition='outside')
                    fig_prod.update_coloraxes(colorbar_title="Total de Testes")
                    fig_prod.update_layout(
                        title_font_color='#FFFFFF',
                        xaxis_title='Testador',
                        yaxis_title='Total de Testes',
                        showlegend=False,
                        margin=dict(t=50, b=80, l=80, r=80),
                        height=450
                    )
                    fig_prod.update_xaxes(tickangle=45)
                    st.plotly_chart(fig_prod, use_container_width=True, key="comparativo_produtividade")
                
                with col_graf2:
                    # Gr√°fico de barras comparativo - Taxas
                    fig_taxas = px.bar(
                        testador_stats,
                        x='Responsavel pelo teste',
                        y=['Taxa_Aprovacao', 'Taxa_Deteccao'],
                        title='üìä Comparativo de Taxas (%)',
                        color_discrete_sequence=['#4ECDC4', '#FF6B6B'],
                        barmode='group'
                    )
                    fig_taxas.update_layout(
                        title_font_color='#FFFFFF',
                        xaxis_title='Testador',
                        yaxis_title='Percentual (%)',
                        legend_title='M√©tricas',
                        margin=dict(t=50, b=120, l=80, r=80),
                        height=450
                    )
                    fig_taxas.update_xaxes(tickangle=45)
                    st.plotly_chart(fig_taxas, use_container_width=True, key="comparativo_taxas")
                
                st.markdown("---")
                st.markdown("#### üèÜ **Ranking Detalhado de Performance**")
            
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**üìä M√©tricas por Testador**")
                    for _, row in testador_stats.iterrows():
                        with st.expander(f"üë§ {row['Responsavel pelo teste']}"):
                            col_a, col_b, col_c = st.columns(3)
                            with col_a:
                                st.metric("Total de Testes", int(row['Total_Testes']))
                            with col_b:
                                st.metric("Bugs Encontrados", int(row['Bugs_Encontrados']))
                            with col_c:
                                st.metric("Testes Aprovados", int(row['Testes_Aprovados']))
                            
                            col_d, col_e = st.columns(2)
                            with col_d:
                                st.metric("Taxa de Detec√ß√£o", f"{row['Taxa_Deteccao']:.1f}%")
                            with col_e:
                                st.metric("Taxa de Aprova√ß√£o", f"{row['Taxa_Aprovacao']:.1f}%")
                
                with col2:
                    st.markdown("**üìà Ranking de Performance**")
                    
                    ranking_produtividade = testador_stats.sort_values('Total_Testes', ascending=False)
                    st.markdown("üèÜ **Produtividade (Total de Testes)**")
                    for i, (_, row) in enumerate(ranking_produtividade.iterrows(), 1):
                        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üìç"
                        st.write(f"{emoji} {i}¬∫ - {row['Responsavel pelo teste']}: {int(row['Total_Testes'])} testes")
                    
                    st.markdown("")
                    ranking_deteccao = testador_stats.sort_values('Taxa_Deteccao', ascending=False)
                    st.markdown("üîç **Taxa de Detec√ß√£o de Bugs**")
                    for i, (_, row) in enumerate(ranking_deteccao.iterrows(), 1):
                        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üìç"
                        st.write(f"{emoji} {i}¬∫ - {row['Responsavel pelo teste']}: {row['Taxa_Deteccao']:.1f}%")
                    
                    st.markdown("")
                    ranking_aprovacao = testador_stats.sort_values('Taxa_Aprovacao', ascending=False)
                    st.markdown("‚úÖ **Taxa de Aprova√ß√£o**")
                    for i, (_, row) in enumerate(ranking_aprovacao.iterrows(), 1):
                        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üìç"
                        st.write(f"{emoji} {i}¬∫ - {row['Responsavel pelo teste']}: {row['Taxa_Aprovacao']:.1f}%")
                
                st.markdown("")
                st.markdown("**üìä Comparativo Visual**")
                
                fig_comp = go.Figure()
                
                fig_comp.add_trace(go.Bar(
                    name='Total de Testes',
                    x=testador_stats['Responsavel pelo teste'],
                    y=testador_stats['Total_Testes'],
                    marker_color='lightblue',
                    text=testador_stats['Total_Testes'],
                    textposition='outside'
                ))
                
                fig_comp.update_layout(
                    title="üìä Comparativo de Produtividade entre Testadores",
                    xaxis_title="Testador",
                    yaxis_title="Quantidade de Testes",
                    margin=dict(t=50, b=50, l=50, r=50),
                    height=400
                )
                
                st.plotly_chart(fig_comp, use_container_width=True, key="comparativo_produtividade_detalhado")
                
                fig_taxa = go.Figure()
                
                fig_taxa.add_trace(go.Scatter(
                    name='Taxa de Detec√ß√£o',
                    x=testador_stats['Responsavel pelo teste'],
                    y=testador_stats['Taxa_Deteccao'],
                    mode='lines+markers',
                    marker_color='red',
                    line=dict(width=3),
                    text=[f"{val:.1f}%" for val in testador_stats['Taxa_Deteccao']],
                    textposition='top center'
                ))
                
                fig_taxa.add_trace(go.Scatter(
                    name='Taxa de Aprova√ß√£o',
                    x=testador_stats['Responsavel pelo teste'],
                    y=testador_stats['Taxa_Aprovacao'],
                    mode='lines+markers',
                    marker_color='green',
                    line=dict(width=3),
                    text=[f"{val:.1f}%" for val in testador_stats['Taxa_Aprovacao']],
                    textposition='bottom center'
                ))
                
                fig_taxa.update_layout(
                    title="üìà Comparativo de Taxas de Performance",
                    xaxis_title="Testador",
                    yaxis_title="Percentual (%)",
                    margin=dict(t=50, b=50, l=50, r=50),
                    height=400
                )
                
                st.plotly_chart(fig_taxa, use_container_width=True, key="comparativo_taxas_detalhado")
            

        
        with tab4:
            st.markdown("### üìã **Dados Detalhados**")
            st.markdown("*Visualiza√ß√£o completa dos dados de testes realizados pelo time de Q.A*")
            
            if st.checkbox("Mostrar dados dos testes efetuados", key="show_data_checkbox"):
                st.dataframe(df_com_teste, use_container_width=True)
                st.caption(f"Total de testes efetuados exibidos: {len(df_com_teste)}")
        
        with tab5:
            st.markdown("### üìã **Tarefas Sem Teste**")
            st.markdown("*An√°lise detalhada das tarefas que n√£o passaram por testes de qualidade*")
            
            if not df_sem_teste.empty:
                # Filtros para tarefas sem teste
                st.markdown("#### üîç **Filtros**")
                
                col_filter1, col_filter2, col_filter3 = st.columns(3)
                
                with col_filter1:
                    # Filtro por Sprint
                    sprints_sem_teste = ['Todos'] + sorted(df_sem_teste['Sprint'].dropna().unique().tolist()) if 'Sprint' in df_sem_teste.columns else ['Todos']
                    sprint_selecionado = st.selectbox("Sprint:", sprints_sem_teste, key="sprint_sem_teste")
                
                with col_filter2:
                    # Filtro por Time
                    times_sem_teste = ['Todos'] + sorted(df_sem_teste['Time'].dropna().unique().tolist()) if 'Time' in df_sem_teste.columns else ['Todos']
                    time_selecionado = st.selectbox("Time:", times_sem_teste, key="time_sem_teste")
                
                with col_filter3:
                    # Filtro por Respons√°vel
                    responsaveis_sem_teste = ['Todos'] + sorted(df_sem_teste['Respons√°vel'].dropna().unique().tolist()) if 'Respons√°vel' in df_sem_teste.columns else ['Todos']
                    responsavel_selecionado = st.selectbox("Respons√°vel:", responsaveis_sem_teste, key="responsavel_sem_teste")
                
                # Aplicar filtros
                df_sem_teste_filtrado = df_sem_teste.copy()
                
                if sprint_selecionado != 'Todos':
                    df_sem_teste_filtrado = df_sem_teste_filtrado[df_sem_teste_filtrado['Sprint'] == sprint_selecionado]
                
                if time_selecionado != 'Todos':
                    df_sem_teste_filtrado = df_sem_teste_filtrado[df_sem_teste_filtrado['Time'] == time_selecionado]
                
                if responsavel_selecionado != 'Todos':
                    df_sem_teste_filtrado = df_sem_teste_filtrado[df_sem_teste_filtrado['Respons√°vel'] == responsavel_selecionado]
                
                st.markdown("---")
                
                # M√©tricas resumidas
                col_metric1, col_metric2, col_metric3, col_metric4 = st.columns(4)
                
                with col_metric1:
                    st.metric("Total de Tarefas", len(df_sem_teste_filtrado))
                
                with col_metric2:
                    times_unicos = df_sem_teste_filtrado['Time'].nunique() if 'Time' in df_sem_teste_filtrado.columns else 0
                    st.metric("Times Envolvidos", times_unicos)
                
                with col_metric3:
                    sprints_unicos = df_sem_teste_filtrado['Sprint'].nunique() if 'Sprint' in df_sem_teste_filtrado.columns else 0
                    st.metric("Sprints Afetados", sprints_unicos)
                
                with col_metric4:
                    responsaveis_unicos = df_sem_teste_filtrado['Respons√°vel'].nunique() if 'Respons√°vel' in df_sem_teste_filtrado.columns else 0
                    st.metric("Desenvolvedores", responsaveis_unicos)
                
                st.markdown("---")
                
                # Gr√°ficos de an√°lise
                if not df_sem_teste_filtrado.empty:
                    col_chart1, col_chart2 = st.columns(2)
                    
                    with col_chart1:
                        # Gr√°fico por Time
                        if 'Time' in df_sem_teste_filtrado.columns:
                            time_counts = df_sem_teste_filtrado['Time'].value_counts()
                            if not time_counts.empty:
                                fig_time = px.bar(
                                    x=time_counts.values,
                                    y=time_counts.index,
                                    orientation='h',
                                    title='Tarefas Sem Teste por Time',
                                    labels={'x': 'Quantidade', 'y': 'Time'}
                                )
                                fig_time.update_traces(marker_color='#FF6B6B', text=time_counts.values, textposition='outside')
                                fig_time.update_layout(
                                    margin=dict(t=50, b=80, l=150, r=80),
                                    height=400
                                )
                                st.plotly_chart(fig_time, use_container_width=True)
                    
                    with col_chart2:
                        # Gr√°fico por Sprint
                        if 'Sprint' in df_sem_teste_filtrado.columns:
                            sprint_counts = df_sem_teste_filtrado['Sprint'].value_counts().sort_index()
                            if not sprint_counts.empty:
                                fig_sprint = px.bar(
                                    x=sprint_counts.index,
                                    y=sprint_counts.values,
                                    title='Tarefas Sem Teste por Sprint',
                                    labels={'x': 'Sprint', 'y': 'Quantidade'}
                                )
                                fig_sprint.update_traces(marker_color='#FFA726', text=sprint_counts.values, textposition='outside')
                                fig_sprint.update_layout(
                                    margin=dict(t=50, b=80, l=80, r=80),
                                    height=400
                                )
                                st.plotly_chart(fig_sprint, use_container_width=True)
                
                st.markdown("---")
                
                # Tabela de dados filtrados
                st.markdown("#### üìä **Dados Detalhados**")
                if st.checkbox("Mostrar tabela de tarefas sem teste", key="show_sem_teste_table"):
                    st.dataframe(df_sem_teste_filtrado, use_container_width=True)
                    st.caption(f"Exibindo {len(df_sem_teste_filtrado)} de {len(df_sem_teste)} tarefas sem teste")
                    
                    # Op√ß√£o de download
                    if not df_sem_teste_filtrado.empty:
                        csv = df_sem_teste_filtrado.to_csv(index=False)
                        st.download_button(
                            label="üì• Baixar dados filtrados (CSV)",
                            data=csv,
                            file_name=f"tarefas_sem_teste_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            mime="text/csv"
                        )
            else:
                st.info("üìã Nenhuma tarefa sem teste encontrada nos dados carregados.")
                st.markdown("""
                ### ‚ÑπÔ∏è **Sobre esta se√ß√£o:**
                
                Esta aba mostra tarefas que foram marcadas com motivo "SEM TESTE", permitindo:
                
                - **Filtros avan√ßados** por Sprint, Time e Respons√°vel
                - **M√©tricas resumidas** do impacto
                - **Visualiza√ß√µes gr√°ficas** para an√°lise
                - **Exporta√ß√£o de dados** filtrados
                
                Isso ajuda a identificar padr√µes e tomar a√ß√µes para melhorar a cobertura de testes.
                """)
        
        with tab6:
            st.markdown("### üî¢ **An√°lise de Erros Encontrados**")
            st.markdown("*An√°lise detalhada dos erros identificados durante os testes*")
            
            # Informa√ß√£o sobre o escopo da an√°lise
            st.info("‚ÑπÔ∏è **Importante**: A taxa de testes com erro √© calculada sobre o total de testes realizados. O gr√°fico de distribui√ß√£o mostra tr√™s categorias: testes com erro, testes sem erro e testes sem dados de erro preenchidos.")
            
            if 'Erros' in df_com_teste.columns:
                # Verificar se h√° dados de erros
                dados_erros = df_com_teste[df_com_teste['Erros'].notna()]
                
                if not dados_erros.empty:
                    # M√©tricas principais de erros
                    st.markdown("#### üìä **M√©tricas de Erros**")
                    
                    col_err1, col_err2, col_err3, col_err4 = st.columns(4)
                    
                    with col_err1:
                        total_erros = contar_total_erros(dados_erros)
                        st.metric("üî¢ Total de Erros", f"{total_erros:,}")
                    
                    with col_err2:
                        media_erros = calcular_media_erros_por_teste(dados_erros)
                        st.metric("üìä M√©dia por Teste", f"{media_erros:.1f}")
                    
                    with col_err3:
                        distribuicao = analisar_distribuicao_erros(dados_erros)
                        if distribuicao:
                            st.metric("üìà M√°ximo de Erros", f"{distribuicao['max_erros_teste']}")
                    
                    with col_err4:
                        if distribuicao:
                            testes_com_erro = distribuicao['testes_com_erro']
                            total_testes = distribuicao['total_testes']
                            taxa = (testes_com_erro / total_testes * 100) if total_testes > 0 else 0
                            st.metric("‚ö†Ô∏è Taxa c/ Erro", f"{taxa:.1f}%")
                    
                    st.markdown("---")
                    
                    # Gr√°ficos de an√°lise de erros
                    st.markdown("#### üìà **An√°lise Visual de Erros**")
                    
                    col_graf_err1, col_graf_err2 = st.columns(2)
                    
                    with col_graf_err1:
                        # Erros por time
                        fig_erros_time = grafico_erros_coluna_por_time(dados_erros)
                        if fig_erros_time:
                            st.plotly_chart(fig_erros_time, use_container_width=True, key="erros_coluna_por_time")
                        
                        # Distribui√ß√£o de erros
                        fig_dist_erros = grafico_distribuicao_erros(dados_erros)
                        if fig_dist_erros:
                            st.plotly_chart(fig_dist_erros, use_container_width=True, key="distribuicao_erros")
                    
                    with col_graf_err2:
                        # Erros por testador
                        fig_erros_testador = grafico_erros_por_testador(dados_erros)
                        if fig_erros_testador:
                            st.plotly_chart(fig_erros_testador, use_container_width=True, key="erros_por_testador")
                        
                        # M√©dia de erros por time
                        fig_media_erros = grafico_media_erros_por_time(dados_erros)
                        if fig_media_erros:
                            st.plotly_chart(fig_media_erros, use_container_width=True, key="media_erros_por_time")
                    
                    st.markdown("---")
                    
                    # Insights autom√°ticos sobre erros
                    st.markdown("#### üí° **Insights sobre Erros**")
                    
                    insights_erros = []
                    
                    # Insight sobre total de erros
                    if total_erros > 0:
                        if media_erros > 2:
                            insights_erros.append(f"üö® **ATEN√á√ÉO**: M√©dia de {media_erros:.1f} erros por teste √© alta - revisar processos")
                        elif media_erros > 1:
                            insights_erros.append(f"‚ö†Ô∏è M√©dia de {media_erros:.1f} erros por teste - monitorar tend√™ncia")
                        else:
                            insights_erros.append(f"‚úÖ M√©dia de {media_erros:.1f} erros por teste est√° em n√≠vel aceit√°vel")
                    
                    # Insight sobre distribui√ß√£o
                    if distribuicao:
                        if distribuicao['max_erros_teste'] > 5:
                            insights_erros.append(f"üîç **CR√çTICO**: Teste com {distribuicao['max_erros_teste']} erros requer investiga√ß√£o")
                        
                        taxa_sem_erro = (distribuicao['testes_sem_erro'] / distribuicao['total_testes'] * 100) if distribuicao['total_testes'] > 0 else 0
                        if taxa_sem_erro > 70:
                            insights_erros.append(f"‚úÖ {taxa_sem_erro:.1f}% dos testes n√£o encontraram erros - boa qualidade")
                        elif taxa_sem_erro < 50:
                            insights_erros.append(f"‚ö†Ô∏è Apenas {taxa_sem_erro:.1f}% dos testes n√£o encontraram erros - revisar qualidade")
                    
                    # Insight sobre time com mais erros
                    erros_por_time = contar_erros_por_time(dados_erros)
                    if not erros_por_time.empty:
                        time_mais_erros = erros_por_time.index[0]
                        qtd_erros_time = erros_por_time.iloc[0]
                        insights_erros.append(f"üè¢ Time **{time_mais_erros}** tem o maior n√∫mero de erros ({qtd_erros_time})")
                    
                    # Insight sobre testador com mais erros
                    erros_por_testador = contar_erros_por_testador(dados_erros)
                    if not erros_por_testador.empty:
                        testador_mais_erros = erros_por_testador.index[0]
                        qtd_erros_testador = erros_por_testador.iloc[0]
                        insights_erros.append(f"üë§ Testador **{testador_mais_erros}** identificou mais erros ({qtd_erros_testador})")
                    
                    # Exibir insights
                    for insight in insights_erros:
                        if "CR√çTICO" in insight or "ATEN√á√ÉO" in insight:
                            st.error(insight)
                        elif "‚ö†Ô∏è" in insight:
                            st.warning(insight)
                        else:
                            st.info(insight)
                    
                    st.markdown("---")
                    
                    # Tabela detalhada de erros
                    st.markdown("#### üìã **Dados Detalhados de Erros**")
                    if st.checkbox("Mostrar tabela de testes com erros", key="show_erros_table"):
                        # Filtrar apenas testes com erros > 0
                        dados_temp = dados_erros.copy()
                        dados_temp['Erros'] = pd.to_numeric(dados_temp['Erros'], errors='coerce').fillna(0)
                        dados_com_erros = dados_temp[dados_temp['Erros'] > 0].sort_values('Erros', ascending=False)
                        if not dados_com_erros.empty:
                            st.dataframe(dados_com_erros, use_container_width=True)
                            st.caption(f"Exibindo {len(dados_com_erros)} testes que encontraram erros")
                            
                            # Op√ß√£o de download
                            csv = dados_com_erros.to_csv(index=False)
                            st.download_button(
                                label="üì• Baixar dados de erros (CSV)",
                                data=csv,
                                file_name=f"analise_erros_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                mime="text/csv"
                            )
                        else:
                            st.info("üìã Nenhum teste com erros encontrado nos dados filtrados.")
                else:
                    st.info("üìã Nenhum dado de erro encontrado nos testes realizados.")
            else:
                st.warning("‚ö†Ô∏è Coluna 'Erros' n√£o encontrada na planilha. Verifique se a coluna foi adicionada corretamente.")
                st.markdown("""
                ### ‚ÑπÔ∏è **Sobre esta se√ß√£o:**
                
                Esta aba analisa a coluna "Erros" da planilha, mostrando:
                
                - **M√©tricas de erros** por time e testador
                - **Distribui√ß√£o de erros** encontrados
                - **An√°lise visual** com gr√°ficos interativos
                - **Insights autom√°ticos** sobre padr√µes de erro
                - **Exporta√ß√£o de dados** para an√°lise externa
                
                Para usar esta funcionalidade, certifique-se de que a coluna "Erros" existe na planilha.
                """)
        
        with tab7:
            st.markdown("### üêõ **An√°lise Detalhada de Bugs**")
            st.markdown("*Insights profissionais sobre defeitos identificados em produ√ß√£o*")
            
            # Carregar dados de bugs
            df_bugs = carregar_dados_bugs()
            
            if df_bugs is not None and not df_bugs.empty:
                # Filtros para an√°lise de bugs
                st.markdown("#### üîç **Filtros de Bugs**")
                
                col_bug_f1, col_bug_f2, col_bug_f3, col_bug_f4, col_bug_f5 = st.columns(5)
                
                with col_bug_f1:
                    times_bugs_disponiveis = ['Todos'] + sorted(df_bugs['Time'].dropna().unique().tolist()) if 'Time' in df_bugs.columns else ['Todos']
                    time_bug_selecionado = st.selectbox("Filtrar por Time:", times_bugs_disponiveis, key="filter_time_bugs")
                
                with col_bug_f2:
                    status_bugs_disponiveis = ['Todos'] + sorted(df_bugs['Status'].dropna().unique().tolist()) if 'Status' in df_bugs.columns else ['Todos']
                    status_bug_selecionado = st.selectbox("Filtrar por Status:", status_bugs_disponiveis, key="filter_status_bugs")
                
                with col_bug_f3:
                    prioridade_bugs_disponiveis = ['Todos'] + sorted(df_bugs['Prioridade'].dropna().unique().tolist()) if 'Prioridade' in df_bugs.columns else ['Todos']
                    prioridade_bug_selecionada = st.selectbox("Filtrar por Prioridade:", prioridade_bugs_disponiveis, key="filter_prioridade_bugs")
                
                with col_bug_f4:
                    fonte_bugs_disponiveis = ['Todos'] + sorted(df_bugs['Encontrado por:'].dropna().unique().tolist()) if 'Encontrado por:' in df_bugs.columns else ['Todos']
                    fonte_bug_selecionada = st.selectbox("Filtrar por Fonte:", fonte_bugs_disponiveis, key="filter_fonte_bugs")
                
                with col_bug_f5:
                    if 'Data' in df_bugs.columns and not df_bugs['Data'].dropna().empty:
                        data_bug_min = df_bugs['Data'].min().date()
                        data_bug_max = df_bugs['Data'].max().date()
                        data_bug_range = st.date_input(
                            "Per√≠odo:",
                            value=(data_bug_min, data_bug_max),
                            min_value=data_bug_min,
                            max_value=data_bug_max,
                            key="filter_data_bugs"
                        )
                    else:
                        data_bug_range = None
                
                # Aplicar filtros aos dados de bugs
                df_bugs_filtrado = df_bugs.copy()
                
                if time_bug_selecionado != 'Todos':
                    df_bugs_filtrado = df_bugs_filtrado[df_bugs_filtrado['Time'] == time_bug_selecionado]
                
                if status_bug_selecionado != 'Todos':
                    df_bugs_filtrado = df_bugs_filtrado[df_bugs_filtrado['Status'] == status_bug_selecionado]
                
                if prioridade_bug_selecionada != 'Todos':
                    df_bugs_filtrado = df_bugs_filtrado[df_bugs_filtrado['Prioridade'] == prioridade_bug_selecionada]
                
                if fonte_bug_selecionada != 'Todos':
                    df_bugs_filtrado = df_bugs_filtrado[df_bugs_filtrado['Encontrado por:'] == fonte_bug_selecionada]
                
                if data_bug_range and len(data_bug_range) == 2 and 'Data' in df_bugs.columns:
                    df_bugs_filtrado = df_bugs_filtrado[
                        (df_bugs_filtrado['Data'].dt.date >= data_bug_range[0]) & 
                        (df_bugs_filtrado['Data'].dt.date <= data_bug_range[1])
                    ]
                
                # Verificar se h√° filtros ativos para bugs
                filtros_bugs_ativos = (
                    time_bug_selecionado != 'Todos' or 
                    status_bug_selecionado != 'Todos' or 
                    prioridade_bug_selecionada != 'Todos' or 
                    fonte_bug_selecionada != 'Todos' or 
                    (data_bug_range and len(data_bug_range) == 2)
                )
                
                if filtros_bugs_ativos:
                    st.info(f"Mostrando {len(df_bugs_filtrado)} bugs de {len(df_bugs)} registros totais.")
                
                st.markdown("---")
                # Processar m√©tricas de bugs (usando dados filtrados)
                metricas_bugs = processar_metricas_bugs(df_bugs_filtrado)
                
                # M√©tricas principais de bugs
                st.markdown("#### üìä **M√©tricas Executivas de Bugs**")
                
                col_bug1, col_bug2, col_bug3, col_bug4 = st.columns(4)
                
                with col_bug1:
                    st.metric("üêõ Total de Bugs", metricas_bugs.get('total_bugs', 0))
                
                with col_bug2:
                    st.metric("üö® Bugs Cr√≠ticos", metricas_bugs.get('bugs_criticos', 0))
                
                with col_bug3:
                    st.metric("üîì Bugs Abertos", metricas_bugs.get('bugs_abertos', 0))
                
                with col_bug4:
                    st.metric("‚úÖ Bugs Resolvidos", metricas_bugs.get('bugs_resolvidos', 0))
                
                st.markdown("---")
                
                # Gr√°ficos de an√°lise de bugs (usando dados filtrados)
                st.markdown("#### üìà **An√°lise Visual de Bugs**")
                
                col_graf1, col_graf2 = st.columns(2)
                
                with col_graf1:
                    # Status dos bugs
                    fig_status_bugs = grafico_bugs_por_status(df_bugs_filtrado)
                    if fig_status_bugs:
                        st.plotly_chart(fig_status_bugs, use_container_width=True, key="bugs_status")
                    
                    # Bugs por time
                    fig_bugs_time = grafico_bugs_por_time(df_bugs_filtrado)
                    if fig_bugs_time:
                        st.plotly_chart(fig_bugs_time, use_container_width=True, key="bugs_time")
                
                with col_graf2:
                    # Prioridade dos bugs
                    fig_prioridade_bugs = grafico_bugs_por_prioridade(df_bugs_filtrado)
                    if fig_prioridade_bugs:
                        st.plotly_chart(fig_prioridade_bugs, use_container_width=True, key="bugs_prioridade")
                    
                    # Fonte de detec√ß√£o
                    fig_fonte_bugs = grafico_bugs_fonte_deteccao(df_bugs_filtrado)
                    if fig_fonte_bugs:
                        st.plotly_chart(fig_fonte_bugs, use_container_width=True, key="bugs_fonte")
                
                # Evolu√ß√£o temporal dos bugs
                st.markdown("#### üìÖ **Evolu√ß√£o Temporal**")
                fig_evolucao_bugs = grafico_evolucao_bugs(df_bugs_filtrado)
                if fig_evolucao_bugs:
                    st.plotly_chart(fig_evolucao_bugs, use_container_width=True, key="bugs_evolucao")
                
                st.markdown("---")
                
                # Insights autom√°ticos
                st.markdown("#### üí° **Insights Estrat√©gicos**")
                
                insights_bugs = []
                
                # Insight sobre bugs cr√≠ticos
                if metricas_bugs.get('bugs_criticos', 0) > 0:
                    total_bugs = metricas_bugs.get('total_bugs', 1)
                    perc_criticos = (metricas_bugs['bugs_criticos'] / total_bugs) * 100
                    if perc_criticos > 30:
                        insights_bugs.append(f"üö® **ATEN√á√ÉO**: {perc_criticos:.1f}% dos bugs s√£o de alta prioridade - requer a√ß√£o imediata")
                    else:
                        insights_bugs.append(f"‚ö†Ô∏è {perc_criticos:.1f}% dos bugs s√£o de alta prioridade")
                
                # Insight sobre bugs abertos
                if metricas_bugs.get('bugs_abertos', 0) > 0:
                    total_bugs = metricas_bugs.get('total_bugs', 1)
                    perc_abertos = (metricas_bugs['bugs_abertos'] / total_bugs) * 100
                    if perc_abertos > 50:
                        insights_bugs.append(f"üîì **CR√çTICO**: {perc_abertos:.1f}% dos bugs ainda est√£o pendentes de corre√ß√£o")
                    else:
                        insights_bugs.append(f"üîì {perc_abertos:.1f}% dos bugs est√£o pendentes")
                
                # Insight sobre time com mais bugs
                if metricas_bugs.get('bugs_por_time'):
                    time_mais_bugs = max(metricas_bugs['bugs_por_time'], key=metricas_bugs['bugs_por_time'].get)
                    qtd_bugs_time = metricas_bugs['bugs_por_time'][time_mais_bugs]
                    insights_bugs.append(f"üè¢ Time **{time_mais_bugs}** tem o maior n√∫mero de bugs ({qtd_bugs_time})")
                
                # Insight sobre fonte de detec√ß√£o
                if metricas_bugs.get('bugs_por_fonte'):
                    fonte_principal = max(metricas_bugs['bugs_por_fonte'], key=metricas_bugs['bugs_por_fonte'].get)
                    qtd_fonte = metricas_bugs['bugs_por_fonte'][fonte_principal]
                    total_bugs = sum(metricas_bugs['bugs_por_fonte'].values())
                    perc_fonte = (qtd_fonte / total_bugs) * 100
                    if fonte_principal.lower() == 'cliente':
                        insights_bugs.append(f"üîç **ALERTA**: {perc_fonte:.1f}% dos bugs foram encontrados por clientes - melhorar testes internos")
                    else:
                        insights_bugs.append(f"üîç {perc_fonte:.1f}% dos bugs foram detectados por {fonte_principal}")
                
                # Exibir insights
                for insight in insights_bugs:
                    if "CR√çTICO" in insight or "ATEN√á√ÉO" in insight or "ALERTA" in insight:
                        st.error(insight)
                    elif "‚ö†Ô∏è" in insight:
                        st.warning(insight)
                    else:
                        st.info(insight)
                
                st.markdown("---")
                
                # Tabela detalhada de bugs (usando dados filtrados)
                st.markdown("#### üìã **Dados Detalhados de Bugs**")
                if st.checkbox("Mostrar tabela completa de bugs", key="show_bugs_table"):
                    st.dataframe(df_bugs_filtrado, use_container_width=True)
                    st.caption(f"Total de bugs registrados: {len(df_bugs_filtrado)}")
                    
                    # Download dos dados de bugs filtrados
                    csv_bugs = df_bugs_filtrado.to_csv(index=False)
                    st.download_button(
                        label="üì• Baixar dados de bugs filtrados (CSV)",
                        data=csv_bugs,
                        file_name=f"bugs_analysis_filtered_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )
                
                # Recomenda√ß√µes estrat√©gicas
                st.markdown("#### üéØ **Recomenda√ß√µes Estrat√©gicas**")
                
                recomendacoes = []
                
                if metricas_bugs.get('bugs_criticos', 0) > 3:
                    recomendacoes.append("üö® **Priorizar corre√ß√£o de bugs cr√≠ticos** - Alocar recursos dedicados")
                
                if metricas_bugs.get('bugs_abertos', 0) > metricas_bugs.get('bugs_resolvidos', 0):
                    recomendacoes.append("‚ö° **Acelerar processo de corre√ß√£o** - Bugs abertos excedem resolvidos")
                
                if metricas_bugs.get('bugs_por_fonte', {}).get('Cliente', 0) > 0:
                    recomendacoes.append("üîç **Fortalecer testes internos** - Evitar bugs chegarem ao cliente")
                
                if len(metricas_bugs.get('bugs_por_time', {})) > 3:
                    recomendacoes.append("üìö **Implementar treinamento de qualidade** - M√∫ltiplos times afetados")
                
                if not recomendacoes:
                    recomendacoes.append("‚úÖ **Manter padr√£o atual** - M√©tricas de bugs est√£o controladas")
                
                for rec in recomendacoes:
                    st.success(rec)
                    
            else:
                st.info("üìÅ Fa√ßa upload da planilha de bugs para come√ßar a an√°lise")
                st.markdown("""
                ### üìã **Como usar a An√°lise de Bugs:**
                
                1. **Fa√ßa upload da planilha de bugs** usando o bot√£o acima
                2. **Estrutura esperada do arquivo:**
                   - **Data**: Data de identifica√ß√£o do bug
                   - **Time**: Time respons√°vel pelo desenvolvimento
                   - **Encontrado por**: Quem identificou o bug (Q.A, Cliente, etc.)
                   - **BUG**: Descri√ß√£o do bug
                   - **Status**: Status atual (Corrigido, Pendente, Em corre√ß√£o)
                   - **Prioridade**: Prioridade do bug (Alta, Media, Baixa)
                
                3. **Funcionalidades dispon√≠veis:**
                   - üìä M√©tricas executivas de bugs
                   - üìà An√°lise visual por status, prioridade e time
                   - üîç Fonte de detec√ß√£o dos bugs
                   - üìÖ Evolu√ß√£o temporal
                   - üí° Insights autom√°ticos
                   - üéØ Recomenda√ß√µes estrat√©gicas
                """)
        
        with tab8:
            st.header("üìä Relat√≥rio Detalhado para P.M.")
            st.markdown("### An√°lise Detalhada de Bugs e Falhas por Tarefa")
            
            # Filtros espec√≠ficos para o relat√≥rio
            col1, col2, col3 = st.columns(3)
            
            with col1:
                times_disponiveis = ['Todos'] + sorted(df_com_teste['Time'].dropna().unique().tolist())
                time_selecionado = st.selectbox("Filtrar por Time:", times_disponiveis, key="pm_time")
            
            with col2:
                status_disponiveis = ['Todos'] + sorted(df_com_teste['Status'].dropna().unique().tolist())
                status_selecionado = st.selectbox("Filtrar por Status:", status_disponiveis, key="pm_status")
            
            with col3:
                periodo_dias = st.selectbox("Per√≠odo:", [7, 15, 30, 60, 90, 'Todos'], index=2, key="pm_periodo")
            
            # Aplicar filtros
            df_pm = df_com_teste.copy()
            
            if time_selecionado != 'Todos':
                df_pm = df_pm[df_pm['Time'] == time_selecionado]
            
            if status_selecionado != 'Todos':
                df_pm = df_pm[df_pm['Status'] == status_selecionado]
            
            if periodo_dias != 'Todos':
                data_limite = datetime.now() - pd.Timedelta(days=periodo_dias)
                df_pm = df_pm[df_pm['Data'] >= data_limite]
            
            # Separar dados por tipo de problema
            df_rejeitadas = df_pm[df_pm['Status'] == 'REJEITADA'].copy()
            df_temp = df_pm.copy()
            df_temp['Erros'] = pd.to_numeric(df_temp['Erros'], errors='coerce').fillna(0)
            df_com_erros = df_temp[df_temp['Erros'].notna() & (df_temp['Erros'] > 0)].copy()
            
            # Se√ß√£o 1: Resumo Executivo
            st.markdown("#### üìà Resumo Executivo")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                total_tasks = len(df_pm)
                tarefas_unicas = df_pm['Nome da Task'].nunique() if 'Nome da Task' in df_pm.columns else 0
                st.metric(
                    "üìã Total de Tarefas", 
                    f"{tarefas_unicas}",
                    delta=f"üìä {total_tasks} testes realizados",
                    help=f"Tarefas √∫nicas testadas: {tarefas_unicas} | Total de testes efetuados: {total_tasks}"
                )
            
            with col2:
                total_rejeitadas = len(df_rejeitadas)
                taxa_rejeicao = (total_rejeitadas / total_tasks * 100) if total_tasks > 0 else 0
                st.metric("Tarefas Rejeitadas", total_rejeitadas, f"{taxa_rejeicao:.1f}%")
            
            with col3:
                total_com_erros = len(df_com_erros)
                st.metric("Tarefas com Erros", total_com_erros)
            
            with col4:
                total_problemas = total_rejeitadas + total_com_erros
                st.metric("Total de Problemas", total_problemas)
            
            st.divider()
            
            # Se√ß√£o 2: Detalhamento de Tarefas Rejeitadas
            if len(df_rejeitadas) > 0:
                st.markdown("#### üö´ Detalhamento de Tarefas Rejeitadas")
                
                # Criar tabela detalhada com descri√ß√£o dos problemas
                df_rejeitadas_detalhada = df_rejeitadas[['Data', 'Sprint', 'Time', 'Nome da Task', 'Link da Task', 
                                                       'Respons√°vel', 'Motivo', 'Motivo2', 'Motivo3', 'Responsavel pelo teste']].copy()
                
                # Criar coluna de descri√ß√£o consolidada
                def criar_descricao_problema(row):
                    motivos = []
                    if pd.notna(row['Motivo']) and row['Motivo'].strip():
                        motivos.append(f"‚Ä¢ {row['Motivo'].strip()}")
                    if pd.notna(row['Motivo2']) and row['Motivo2'].strip():
                        motivos.append(f"‚Ä¢ {row['Motivo2'].strip()}")
                    if pd.notna(row['Motivo3']) and row['Motivo3'].strip():
                        motivos.append(f"‚Ä¢ {row['Motivo3'].strip()}")
                    
                    if motivos:
                        return "\n".join(motivos)
                    else:
                        return "Motivo n√£o especificado"
                
                df_rejeitadas_detalhada['Descri√ß√£o do Problema'] = df_rejeitadas_detalhada.apply(criar_descricao_problema, axis=1)
                
                # Reorganizar colunas para melhor visualiza√ß√£o
                colunas_exibir = ['Data', 'Sprint', 'Time', 'Nome da Task', 'Respons√°vel', 
                                'Descri√ß√£o do Problema', 'Responsavel pelo teste', 'Link da Task']
                
                df_rejeitadas_exibir = df_rejeitadas_detalhada[colunas_exibir].copy()
                df_rejeitadas_exibir['Data'] = df_rejeitadas_exibir['Data'].dt.strftime('%d/%m/%Y')
                
                st.dataframe(
                    df_rejeitadas_exibir,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        "Link da Task": st.column_config.LinkColumn(
                            "Link da Task",
                            help="Clique para abrir a task",
                            display_text="üîó Abrir Task"
                        ),
                        "Descri√ß√£o do Problema": st.column_config.TextColumn(
                            "Descri√ß√£o do Problema",
                            help="Detalhes dos problemas encontrados",
                            width="large"
                        )
                    }
                )
                
                # Bot√£o para exportar dados de rejeitadas
                csv_rejeitadas = df_rejeitadas_exibir.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    label="üì• Exportar Tarefas Rejeitadas (CSV)",
                    data=csv_rejeitadas,
                    file_name=f"tarefas_rejeitadas_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                    mime="text/csv"
                )
            
            st.divider()
            
            # Se√ß√£o 3: Detalhamento de Tarefas com Erros
            if len(df_com_erros) > 0:
                st.markdown("#### ‚ö†Ô∏è Detalhamento de Tarefas com Erros")
                
                df_erros_detalhada = df_com_erros[['Data', 'Sprint', 'Time', 'Nome da Task', 'Link da Task', 
                                                 'Respons√°vel', 'Erros', 'Status', 'Responsavel pelo teste']].copy()
                
                # Criar descri√ß√£o para erros
                def criar_descricao_erro(row):
                    num_erros = int(row['Erros']) if pd.notna(row['Erros']) else 0
                    status = row['Status'] if pd.notna(row['Status']) else 'N/A'
                    
                    if num_erros == 1:
                        return f"1 erro encontrado (Status: {status})"
                    elif num_erros > 1:
                        return f"{num_erros} erros encontrados (Status: {status})"
                    else:
                        return "Erro n√£o quantificado"
                
                df_erros_detalhada['Descri√ß√£o do Erro'] = df_erros_detalhada.apply(criar_descricao_erro, axis=1)
                
                colunas_erros = ['Data', 'Sprint', 'Time', 'Nome da Task', 'Respons√°vel', 
                               'Descri√ß√£o do Erro', 'Responsavel pelo teste', 'Link da Task']
                
                df_erros_exibir = df_erros_detalhada[colunas_erros].copy()
                df_erros_exibir['Data'] = df_erros_exibir['Data'].dt.strftime('%d/%m/%Y')
                
                st.dataframe(
                    df_erros_exibir,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        "Link da Task": st.column_config.LinkColumn(
                            "Link da Task",
                            help="Clique para abrir a task",
                            display_text="üîó Abrir Task"
                        ),
                        "Descri√ß√£o do Erro": st.column_config.TextColumn(
                            "Descri√ß√£o do Erro",
                            help="Detalhes dos erros encontrados"
                        )
                    }
                )
                
                # Bot√£o para exportar dados de erros
                csv_erros = df_erros_exibir.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    label="üì• Exportar Tarefas com Erros (CSV)",
                    data=csv_erros,
                    file_name=f"tarefas_com_erros_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                    mime="text/csv"
                )
            
            st.divider()
            
            # Se√ß√£o 4: An√°lise de Tend√™ncias
            st.markdown("#### üìä An√°lise de Tend√™ncias")
            
            if len(df_pm) > 0:
                col1, col2 = st.columns(2)
                
                with col1:
                    # Gr√°fico de problemas por time
                    problemas_por_time = df_pm.groupby('Time').agg({
                        'Status': lambda x: (x == 'REJEITADA').sum(),
                        'Erros': lambda x: (pd.to_numeric(x, errors='coerce').fillna(0) > 0).sum() if x.notna().any() else 0
                    }).reset_index()
                    problemas_por_time.columns = ['Time', 'Rejeitadas', 'Com_Erros']
                    problemas_por_time['Total_Problemas'] = problemas_por_time['Rejeitadas'] + problemas_por_time['Com_Erros']
                    
                    if not problemas_por_time.empty and problemas_por_time['Total_Problemas'].sum() > 0:
                        fig_time = px.bar(
                            problemas_por_time.sort_values('Total_Problemas', ascending=True),
                            x='Total_Problemas',
                            y='Time',
                            orientation='h',
                            title="Problemas por Time",
                            color='Total_Problemas',
                            color_continuous_scale='Reds'
                        )
                        fig_time.update_layout(height=400)
                        st.plotly_chart(fig_time, use_container_width=True)
                    else:
                        st.info("Nenhum problema encontrado para exibir no gr√°fico.")
                
                with col2:
                    # Gr√°fico de evolu√ß√£o temporal
                    if 'Data' in df_pm.columns:
                        df_pm['Semana'] = df_pm['Data'].dt.to_period('W').astype(str)
                        evolucao = df_pm.groupby('Semana').agg({
                            'Status': lambda x: (x == 'REJEITADA').sum(),
                            'Erros': lambda x: (pd.to_numeric(x, errors='coerce').fillna(0) > 0).sum() if x.notna().any() else 0
                        }).reset_index()
                        evolucao.columns = ['Semana', 'Rejeitadas', 'Com_Erros']
                        
                        if not evolucao.empty:
                            fig_evolucao = go.Figure()
                            fig_evolucao.add_trace(go.Scatter(
                                x=evolucao['Semana'],
                                y=evolucao['Rejeitadas'],
                                mode='lines+markers',
                                name='Rejeitadas',
                                line=dict(color='red')
                            ))
                            fig_evolucao.add_trace(go.Scatter(
                                x=evolucao['Semana'],
                                y=evolucao['Com_Erros'],
                                mode='lines+markers',
                                name='Com Erros',
                                line=dict(color='orange')
                            ))
                            fig_evolucao.update_layout(
                                title="Evolu√ß√£o de Problemas por Semana",
                                xaxis_title="Semana",
                                yaxis_title="Quantidade",
                                height=400
                            )
                            st.plotly_chart(fig_evolucao, use_container_width=True)
                        else:
                            st.info("Dados insuficientes para an√°lise temporal.")
            
            # Se√ß√£o 5: Recomenda√ß√µes
            st.markdown("#### üí° Recomenda√ß√µes para P.M.")
            
            if len(df_pm) > 0:
                recomendacoes = []
                
                # An√°lise de taxa de rejei√ß√£o
                if taxa_rejeicao > 20:
                    recomendacoes.append(f"üî¥ **Alta taxa de rejei√ß√£o ({taxa_rejeicao:.1f}%)**: Revisar processo de desenvolvimento e crit√©rios de aceita√ß√£o")
                elif taxa_rejeicao > 10:
                    recomendacoes.append(f"üü° **Taxa de rejei√ß√£o moderada ({taxa_rejeicao:.1f}%)**: Monitorar tend√™ncia e identificar padr√µes")
                else:
                    recomendacoes.append(f"üü¢ **Taxa de rejei√ß√£o baixa ({taxa_rejeicao:.1f}%)**: Manter qualidade atual")
                
                # An√°lise por time
                if len(df_rejeitadas) > 0:
                    time_mais_problemas = df_rejeitadas['Time'].value_counts().index[0]
                    qtd_problemas = df_rejeitadas['Time'].value_counts().iloc[0]
                    recomendacoes.append(f"‚ö†Ô∏è **Time {time_mais_problemas}** apresenta mais problemas ({qtd_problemas} tarefas rejeitadas)")
                
                # An√°lise de motivos mais comuns
                if len(df_rejeitadas) > 0:
                    motivos_todos = []
                    for col in ['Motivo', 'Motivo2', 'Motivo3']:
                        motivos_todos.extend(df_rejeitadas[col].dropna().tolist())
                    
                    if motivos_todos:
                        motivo_mais_comum = pd.Series(motivos_todos).value_counts().index[0]
                        recomendacoes.append(f"üéØ **Motivo mais comum**: {motivo_mais_comum}")
                
                for rec in recomendacoes:
                    st.markdown(rec)
            else:
                st.info("Nenhum dado dispon√≠vel para an√°lise com os filtros selecionados.")
            
            st.markdown("""
            ---
            **üíº Sobre este Relat√≥rio:**
            
            Este relat√≥rio foi desenvolvido especificamente para fornecer √† P.M. uma vis√£o detalhada dos problemas encontrados nas tarefas, 
            incluindo descri√ß√µes espec√≠ficas dos bugs e falhas. Os dados podem ser exportados em CSV para an√°lises adicionais ou 
            apresenta√ß√µes executivas.
            
            **üìã Como usar:**
            1. Use os filtros no topo para focar em times, per√≠odos ou status espec√≠ficos
            2. Analise as tabelas detalhadas para entender os problemas espec√≠ficos
            3. Exporte os dados em CSV para an√°lises offline
            4. Use as tend√™ncias e recomenda√ß√µes para tomada de decis√£o
            """)
    else:
        st.info("üëÜ Fa√ßa upload de um arquivo Excel para come√ßar a an√°lise")
        st.markdown("""
        ### üìã Colunas esperadas na planilha:
        - **Data**: Data da task
        - **Sprint**: N√∫mero do sprint
        - **Time**: Nome do time respons√°vel
        - **Nome da Task**: T√≠tulo da task
        - **Link da task**: URL da task
        - **Status**: APROVADA, REJEITADA ou PRONTO PARA PUBLICA√á√ÉO
        - **Respons√°vel**: Desenvolvedor respons√°vel
        - **Motivo**: Primeiro motivo (se rejeitada)
        - **Motivo2**: Segundo motivo (se rejeitada)
        - **Motivo3**: Terceiro motivo (se rejeitada)
        - **Responsavel pelo teste**: Testador respons√°vel
        - **ID**: Identificador √∫nico da task
        
        ### üöÄ Funcionalidades do Dashboard:
        - An√°lise de performance por sprint
        - M√©tricas de qualidade e rejei√ß√µes
        - Visualiza√ß√µes interativas
        - Filtros avan√ßados por per√≠odo e respons√°vel
        - Exporta√ß√£o de dados
        """)

if __name__ == "__main__":
    main()