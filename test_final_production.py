#!/usr/bin/env python3
"""
Teste FINAL para verificar se os PDFs com gr√°ficos funcionam em produ√ß√£o
Este script deve ser executado no Streamlit Cloud para diagn√≥stico
"""

import os
import sys
from datetime import datetime

def test_environment():
    """Testa o ambiente de execu√ß√£o"""
    print("=== TESTE DE AMBIENTE ===")
    print(f"Python: {sys.version}")
    print(f"OS: {os.name}")
    print(f"CWD: {os.getcwd()}")
    
    # Vari√°veis de ambiente importantes
    env_vars = ['MPLBACKEND', 'DISPLAY', 'KALEIDO_DISABLE_GPU', 'CHROMIUM_FLAGS']
    for var in env_vars:
        print(f"{var}: {os.getenv(var, 'N√ÉO DEFINIDA')}")

def test_imports():
    """Testa importa√ß√µes cr√≠ticas"""
    print("\n=== TESTE DE IMPORTA√á√ïES ===")
    
    modules = {
        'streamlit': 'st',
        'plotly.graph_objects': 'go', 
        'plotly.io': 'pio',
        'kaleido': 'kaleido',
        'reportlab.platypus': 'SimpleDocTemplate',
        'pandas': 'pd',
        'numpy': 'np'
    }
    
    success = 0
    for module, alias in modules.items():
        try:
            exec(f"import {module} as {alias}")
            print(f"‚úÖ {module}")
            success += 1
        except ImportError as e:
            print(f"‚ùå {module}: {e}")
    
    print(f"\nImporta√ß√µes: {success}/{len(modules)} OK")
    return success == len(modules)

def test_kaleido_basic():
    """Teste b√°sico do Kaleido"""
    print("\n=== TESTE KALEIDO B√ÅSICO ===")
    
    try:
        import plotly.graph_objects as go
        import plotly.io as pio
        
        # Mostrar configura√ß√µes atuais
        print(f"Timeout: {pio.kaleido.scope.default_timeout}")
        print(f"Chromium args: {len(pio.kaleido.scope.chromium_args)} argumentos")
        
        # Criar gr√°fico simples
        fig = go.Figure()
        fig.add_trace(go.Bar(x=['A', 'B'], y=[1, 2]))
        fig.update_layout(
            title="Teste Produ√ß√£o",
            width=400,
            height=300,
            plot_bgcolor='white',
            paper_bgcolor='white'
        )
        
        # Tentar converter
        print("Tentando convers√£o...")
        img_bytes = fig.to_image(format="png", width=400, height=300)
        
        if img_bytes and len(img_bytes) > 100:
            print(f"‚úÖ Kaleido OK: {len(img_bytes)} bytes gerados")
            return True
        else:
            print(f"‚ùå Kaleido falhou: {len(img_bytes) if img_bytes else 0} bytes")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste Kaleido: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_pdf_generation():
    """Testa gera√ß√£o de PDF com gr√°fico"""
    print("\n=== TESTE GERA√á√ÉO PDF ===")
    
    try:
        from dashboard import exportar_grafico_para_pdf
        import plotly.graph_objects as go
        from reportlab.platypus import SimpleDocTemplate
        from reportlab.lib.pagesizes import A4
        import io
        
        # Criar gr√°fico de teste
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=['Aprovadas', 'Rejeitadas', 'Em Teste'],
            y=[10, 5, 3],
            marker_color=['green', 'red', 'orange']
        ))
        fig.update_layout(
            title="Teste Dashboard PDF",
            width=600,
            height=400
        )
        
        # Tentar exportar gr√°fico
        print("Exportando gr√°fico...")
        img_obj = exportar_grafico_para_pdf(fig, "Teste Produ√ß√£o")
        
        if img_obj:
            print("‚úÖ Gr√°fico exportado com sucesso")
            
            # Tentar criar PDF
            print("Criando PDF...")
            buffer = io.BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4)
            story = [img_obj]
            doc.build(story)
            
            pdf_size = len(buffer.getvalue())
            print(f"‚úÖ PDF criado: {pdf_size} bytes")
            
            return pdf_size > 1000
        else:
            print("‚ùå Falha ao exportar gr√°fico")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o PDF: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Executa todos os testes"""
    print(f"TESTE FINAL DE PRODU√á√ÉO - {datetime.now()}")
    print("=" * 50)
    
    # Aplicar configura√ß√µes
    try:
        from config_production import setup_production_environment
        setup_production_environment()
    except:
        print("‚ö†Ô∏è Configura√ß√µes de produ√ß√£o n√£o aplicadas")
    
    # Executar testes
    test_environment()
    imports_ok = test_imports()
    
    if not imports_ok:
        print("\n‚ùå FALHA: Importa√ß√µes b√°sicas falharam")
        return False
    
    kaleido_ok = test_kaleido_basic()
    pdf_ok = test_pdf_generation()
    
    # Resultado final
    print("\n" + "=" * 50)
    if kaleido_ok and pdf_ok:
        print("üéâ SUCESSO: Todos os testes passaram!")
        print("‚úÖ PDFs com gr√°ficos devem funcionar em produ√ß√£o")
        return True
    else:
        print("‚ùå FALHA: Alguns testes falharam")
        print(f"Kaleido: {'‚úÖ' if kaleido_ok else '‚ùå'}")
        print(f"PDF: {'‚úÖ' if pdf_ok else '‚ùå'}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)