import os
import sys

def setup_production_environment():
    """
    Configura o ambiente de produ√ß√£o para o Streamlit Cloud
    Usando as novas configura√ß√µes do plotly.io.defaults
    """
    print("üîß Configurando ambiente para produ√ß√£o...")
    
    # Configura√ß√µes de ambiente cr√≠ticas
    os.environ['MPLBACKEND'] = 'Agg'
    os.environ['DISPLAY'] = ':99'
    os.environ['KALEIDO_DISABLE_GPU'] = 'true'
    os.environ['CHROMIUM_FLAGS'] = '--no-sandbox --disable-dev-shm-usage --disable-gpu --single-process'
    
    try:
        # Configurar Plotly/Kaleido
        import plotly.io as pio
        
        # CONFIGURA√á√ïES DO KALEIDO (NOVA API)
        try:
            # Tentar usar a nova API do plotly.io.defaults
            if hasattr(pio, 'defaults'):
                pio.defaults.chromium_args = (
                    '--no-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-gpu',
                    '--single-process'
                )
                pio.defaults.default_timeout = 60
                print("‚úÖ Configura√ß√µes aplicadas via plotly.io.defaults")
            else:
                # Fallback para API antiga (com warning)
                pio.kaleido.scope.chromium_args = (
                    '--no-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-gpu',
                    '--single-process'
                )
                pio.kaleido.scope.default_timeout = 60
                print("‚ö†Ô∏è Usando API depreciada do kaleido.scope")
        except Exception as config_error:
            print(f"‚ö†Ô∏è Erro nas configura√ß√µes do Kaleido: {config_error}")
        
        print("‚úÖ Configura√ß√µes de produ√ß√£o aplicadas com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar produ√ß√£o: {e}")
        return False

def verify_dependencies():
    """
    Verifica se todas as depend√™ncias est√£o dispon√≠veis
    """
    required_modules = ['streamlit', 'plotly', 'kaleido', 'reportlab', 'pandas']
    missing = []
    
    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module} dispon√≠vel")
        except ImportError:
            missing.append(module)
            print(f"‚ùå {module} n√£o encontrado")
    
    return len(missing) == 0, missing

if __name__ == "__main__":
    print("=== CONFIGURA√á√ÉO DE PRODU√á√ÉO ===")
    setup_production_environment()
    deps_ok, missing = verify_dependencies()
    
    if deps_ok:
        print("üéâ Ambiente configurado e pronto para produ√ß√£o!")
    else:
        print(f"‚ö†Ô∏è Depend√™ncias faltando: {missing}")